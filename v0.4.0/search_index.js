var documenterSearchIndex = {"docs":
[{"location":"ref/pix_box/","page":"Tesseract.PixBox","title":"Tesseract.PixBox","text":"PixBox","category":"page"},{"location":"ref/pix_box/#Tesseract.PixBox","page":"Tesseract.PixBox","title":"Tesseract.PixBox","text":"struct PixBox\n    x::Int32\n    y::Int32\n    w::Int32\n    h::Int32\nend\n\nThe PixBox structure is used to identify a region in an image.\n\nValues:\n\nName Description\nx The left side of the region identified by this box.\ny The top edge of the region identified by this box.\nw The width of the box.\nh The height of the box.\n\n\n\n\n\n","category":"type"},{"location":"ref/tess_pipeline_pdf/","page":"Tesseract.tess_pipeline_pdf","title":"Tesseract.tess_pipeline_pdf","text":"tess_pipeline_pdf","category":"page"},{"location":"ref/tess_pipeline_pdf/#Tesseract.tess_pipeline_pdf","page":"Tesseract.tess_pipeline_pdf","title":"Tesseract.tess_pipeline_pdf","text":"tess_pipeline_pdf(\n    pipe::TessPipeline,\n    filename::AbstractString;\n    textOnly::Bool = false,\n    dataDir::AbstractString = TESS_DATA\n)::Bool\n\nGenerate a PDF file from the pipeline and save it to the specified file.  Returns false if there is a problem adding the PDF generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the tsv from.\nR filename  The file to write the tsv to.\nK textOnly  Should the PDF just include text or also contain the images?\nK dataDir  The directory to look for the PDF font file in.\n\nDetails:\n\nIf the file exists it will be overwritten.  A text only PDF will appear empty since Tesseract uses a glyphless font, however you will be able to search for the text and see and \"empty\" page where it's found.  Normally textOnly is false and will include the image scanned by Tesseract which gives you a searchable PDF with the images.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\ndownload_pdf_font() # Make sure we have the PDF font file.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\ntess_pipeline_pdf(pipeline, \"My Book.pdf\")\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\nprintln(string(\"PDF created: \", filesize(\"My Book.pdf\"), \" bytes.\"))\n\n# output\n\nPDF created: 316722 bytes.\n\nSee also: tess_run_pipeline, tess_pipeline_alto,           tess_pipeline_hocr, tess_pipeline_text           tess_pipeline_tsv\n\n\n\n\n\ntess_pipeline_pdf(\n    pipe::TessPipeline;\n    textOnly::Bool = false,\n    dataDir::AbstractString = TESS_DATA\n)::Union{TessOutput, Nothing}\n\nGenerate a PDF file from the pipeline and save it to a byte array.  Returns nothing if there is a problem adding the PDF generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the TSV data from.\nK textOnly  Should the PDF just include text or also contain the images?\nK dataDir  The directory to look for the PDF font file in.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\ndownload_pdf_font() # Make sure we have the PDF font file.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\nbook = tess_pipeline_pdf(pipeline)\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\nprintln(string(\"PDF created: \", length(book[]), \" bytes.\"))\n\n# output\n\nPDF created: 316722 bytes.\n\nSee also: tess_run_pipeline, tess_pipeline_alto,           tess_pipeline_hocr, tess_pipeline_text           tess_pipeline_tsv\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_init/","page":"Tesseract.tess_init","title":"Tesseract.tess_init","text":"tess_init","category":"page"},{"location":"ref/tess_init/#Tesseract.tess_init","page":"Tesseract.tess_init","title":"Tesseract.tess_init","text":"tess_init(\n    inst::TessInst,\n    languages::AbstractString = \"eng\",\n    dataPath::AbstractString = \"tessdata\"\n)::Bool\n\nInitialize the instance for the specified language(s).  Returns false if there was an error.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to initialize.\nO languages eng The language(s) to load.\nO dataPath tessdata The directory to look for the language files in.\n\nDetails:\n\nThis method can be called multiple times to reinitialize the langauges to OCR with.  Multiple langagues can be specified by seperating them with a plus.  So if you want english and spanish you could specify \"eng+spa\".  The language codes are (usually) the ISO 639-3 code.\n\nNote: The language files are NOT automatically downloaded.  If you do not have them installed via alternate means you can download them from https://github.com/tesseract-ocr/tessdata_best.\n\nExample:\n\njulia> using Tesseract\n\njulia> download_languages(\"eng+spa\")\ntrue\n\njulia> instance = TessInst()\nAllocated Tesseract instance.\n\njulia> tess_init(instance, \"spa\")\ntrue\n\nSee also: TessInst()\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_read_png/","page":"Tesseract.pix_read_png","title":"Tesseract.pix_read_png","text":"pix_read_png","category":"page"},{"location":"ref/pix_read_png/#Tesseract.pix_read_png","page":"Tesseract.pix_read_png","title":"Tesseract.pix_read_png","text":"pix_read_png(\n    filename::AbstractString\n)::Union{Pix, Nothing}\n\nRead a PNG image from the specified file.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the PNG file to load.\n\n\n\n\n\npix_read_png(\n    stream::IO\n)::Union{Pix, Nothing}\n\nRead a PNG image from the specified stream.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR stream  The IO stream to read the PNG file from.\n\nDetails:\n\nThis implementation mirrors the API provided by Leptonica when you pass in a FILE pointer. This assumes that the remainder of the stream contains a PNG image.\n\n\n\n\n\npix_read_png(\n    data::AbstractArray{UInt8}\n)::Union{Pix, Nothing}\n\nRead a PNG image from the byte array.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR data  The byte array to read the PNG image from.\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_read_bmp/","page":"Tesseract.pix_read_bmp","title":"Tesseract.pix_read_bmp","text":"pix_read_bmp","category":"page"},{"location":"ref/pix_read_bmp/#Tesseract.pix_read_bmp","page":"Tesseract.pix_read_bmp","title":"Tesseract.pix_read_bmp","text":"pix_read_bmp(\n    filename::AbstractString\n)::Union{Pix, Nothing}\n\nRead a BMP image from the specified file.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the BMP file to load.\n\n\n\n\n\npix_read_bmp(\n    stream::IO\n)::Union{Pix, Nothing}\n\nRead a BMP image from the specified stream.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR stream  The IO stream to read the BMP file from.\n\nDetails:\n\nThis implementation mirrors the API provided by Leptonica when you pass in a FILE pointer. This assumes that the remainder of the stream contains a BMP image.\n\n\n\n\n\npix_read_bmp(\n    data::AbstractArray{UInt8}\n)::Union{Pix, Nothing}\n\nRead a BMP image from the byte array.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR data  The byte array to read the BMP image from.\n\n\n\n\n\n","category":"function"},{"location":"multiple/#Process-multiple-images","page":"Process multiple images","title":"Process multiple images","text":"","category":"section"},{"location":"multiple/","page":"Process multiple images","title":"Process multiple images","text":"This process is normally used to process all the pages in a book.","category":"page"},{"location":"multiple/","page":"Process multiple images","title":"Process multiple images","text":"using Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\ntext = tess_pipeline_text(pipeline)\nhocr = tess_pipeline_hocr(pipeline)\ntsv  = tess_pipeline_tsv(pipeline)\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\nprintln(\"Text size: $(length(text[]))\")\nprintln(\"HOCR size: $(length(hocr[]))\")\nprintln(\"TSV  size: $(length(tsv[]))\")\n\n# output\n\nText size: 4430\nHOCR size: 91120\nTSV  size: 34934","category":"page"},{"location":"multiple/","page":"Process multiple images","title":"Process multiple images","text":"To process multiple pages and combine them all into a single document you use the TessPipeline object.  First a TessInst object is created to handle the OCR then the it's passed to the TessPipeline durring initialization.","category":"page"},{"location":"multiple/","page":"Process multiple images","title":"Process multiple images","text":"You can generate multiple document types simultaneously.  In the above example we use tess_pipeline_text to generate a TXT file, tess_pipeline_hocr to generate a HORC XML file, and tess_pipeline_tsv to get details about the OCR in the Tabbed Separated Format.","category":"page"},{"location":"multiple/","page":"Process multiple images","title":"Process multiple images","text":"Finally tess_run_pipeline is called to generate the documents.  An optional title is added.  Some output formats ignore the title, others will add it to the output.  A callback is used with tess_run_pipeline which passes back a function  that is used to specify the images to decode along with their resolution.  To indicate an error your callback can return false which will in turn cause tess_run_pipeline to return false as well.","category":"page"},{"location":"multiple/","page":"Process multiple images","title":"Process multiple images","text":"In the above example the documents are created in memory and can be accessed by using the [] operation on the returned objects. In general there are 3 output formats for each pipeline output function (i.e. tess_pipeline_text).  The first is to output to a file by specifying a file name.  The second we used above to output the results to memory.  The third is to pass in a callback function that will be called with each line of text, allowing you to process the data as it is being generated.","category":"page"},{"location":"ref/tess_alto/","page":"Tesseract.tess_alto","title":"Tesseract.tess_alto","text":"tess_alto","category":"page"},{"location":"ref/tess_alto/#Tesseract.tess_alto","page":"Tesseract.tess_alto","title":"Tesseract.tess_alto","text":"tess_alto(\n    inst::TessInst,\n    page::Integer = Int32(1)\n)::Union{String, Nothing}\n\nExtract the text in ALTO format from the image.  Returns nothing if there is an error.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to grab the text from.\nO page Int32(1) The page to extract the ALTO text for.\n\nDetails:\n\nThis method will call tess_recognize() if it has not been called yet for the image.  The current ALTO spec can be accessed at https://github.com/altoxml/documentation/wiki/Versions.\n\nExample:\n\nusing Tesseract\n\ndownload_languages()\n\ninstance = TessInst()\npix = sample_pix()\n\ntess_image(instance, pix)\ntess_resolution(instance, 72)\n\nalto = tess_alto(instance)\n\nfor line in split(alto, '\\n'; keepempty = false)[1:5]\n    println(strip(line))\nend\n\n# output\n\n<Page WIDTH=\"500\" HEIGHT=\"600\" PHYSICAL_IMG_NR=\"0\" ID=\"page_0\">\n<PrintSpace HPOS=\"0\" VPOS=\"0\" WIDTH=\"500\" HEIGHT=\"600\">\n<ComposedBlock ID=\"cblock_0\" HPOS=\"10\" VPOS=\"9\" WIDTH=\"479\" HEIGHT=\"514\">\n<TextBlock ID=\"block_0\" HPOS=\"11\" VPOS=\"9\" WIDTH=\"406\" HEIGHT=\"14\">\n<TextLine ID=\"line_0\" HPOS=\"11\" VPOS=\"9\" WIDTH=\"406\" HEIGHT=\"14\">\n\nSee also: tess_text, tess_hocr, tess_tsv, tess_parsed_tsv, tess_confidences\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_get_param/","page":"Tesseract.tess_get_param","title":"Tesseract.tess_get_param","text":"tess_get_param","category":"page"},{"location":"ref/tess_get_param/#Tesseract.tess_get_param","page":"Tesseract.tess_get_param","title":"Tesseract.tess_get_param","text":"tess_get_param(\n    inst::TessInst,\n    name::AbstractString,\n    ::Type{T}\n)::Union{T, Nothing} where T<:Integer\n\nRetrieve an integer parameter from the Tesseract engine.  Returns nothing if the value could not be retrieved.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to read the parameter from.\nR name  The name of the parameter to read.\nR ::Type{T}  The type to return.\n\nExamples:\n\njulia> using Tesseract\n\njulia> download_languages()\ntrue\n\njulia> instance = TessInst()\nAllocated Tesseract instance.\n\njulia> tess_get_param(instance, \"edges_min_nonhole\", Int)\n12\n\nSee also: tess_params, tess_params_parsed, tess_set_param\n\n\n\n\n\ntess_get_param(\n    inst::TessInst,\n    name::AbstractString,\n    ::Type{Bool}\n)::Union{Bool, Nothing}\n\nRetrieve a boolean parameter from the Tesseract engine.  Returns nothing if the value could not be retrieved.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to read the variable from.\nR name  The name of the variable to read.\nR ::Type{Bool}  Identifies that you want a boolean value.\n\nExamples:\n\njulia> using Tesseract\n\njulia> download_languages()\ntrue\n\njulia> instance = TessInst()\nAllocated Tesseract instance.\n\njulia> tess_get_param(instance, \"edges_debug\", Bool)\nfalse\n\nSee also: tess_params, tess_params_parsed, tess_set_param\n\n\n\n\n\ntess_get_param(\n    inst::TessInst,\n    name::AbstractString,\n    ::Type{Float64}\n)::Union{Float64, Nothing}\n\nRetrieve a Float parameter from the Tesseract engine.  Returns nothing if the value could not be retrieved.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to read the variable from.\nR name  The name of the parameter to read.\nR ::Type{Float64}  Identifies that you want a Float64 value.\n\nExamples:\n\njulia> using Tesseract\n\njulia> download_languages()\ntrue\n\njulia> instance = TessInst()\nAllocated Tesseract instance.\n\njulia> tess_get_param(instance, \"classify_min_slope\", Float64)\n0.414214\n\nSee also: tess_params, tess_params_parsed, tess_set_param\n\n\n\n\n\ntess_get_param(\n    inst::TessInst,\n    name::AbstractString,\n    ::Type{String}\n)::Union{String, Nothing}\n\nRetrieve a String parameter from the Tesseract engine.  Returns nothing if the value could not be retrieved.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to read the variable from.\nR name  The name of the parameter to read.\nR ::Type{Float64}  Identifies that you want a Float64 value.\n\nExamples:\n\njulia> using Tesseract\n\njulia> download_languages()\ntrue\n\njulia> instance = TessInst()\nAllocated Tesseract instance.\n\njulia> tess_get_param(instance, \"page_separator\", String)\n\"\\f\"\n\nSee also: tess_params, tess_params_parsed, tess_set_param\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_pipeline_word_box/","page":"Tesseract.tess_pipeline_word_box","title":"Tesseract.tess_pipeline_word_box","text":"tess_pipeline_word_box","category":"page"},{"location":"ref/tess_pipeline_word_box/#Tesseract.tess_pipeline_word_box","page":"Tesseract.tess_pipeline_word_box","title":"Tesseract.tess_pipeline_word_box","text":"tess_pipeline_word_box(\n    pipe::TessPipeline,\n    filename::AbstractString\n)::Bool\n\nGenerate a BOX file from the pipeline and save it to the specified file.  Returns false if there is a problem adding the BOX generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the BOX from.\nR filename  The file to write the BOX to.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\ntess_pipeline_word_box(pipeline, \"My Book.box\")\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\nfor line in readlines(\"My Book.box\")[1:10]\n    println(line)\nend\n\n# output\n\nWordStr 11 577 417 591 0 #No one would have believed in the last years of the\n   418 577 422 591 0\nWordStr 11 557 457 571 0 #the nineteenth century that this world was being watched\n   458 557 462 571 0\nWordStr 10 537 457 551 0 #watched keenly and closely by intelligences greater than\n   458 537 462 551 0\nWordStr 11 517 481 531 0 #than man’s and yet as mortal as his own; that as men busied\n   482 517 486 531 0\nWordStr 11 497 457 511 0 #busied themselves about their various concerns they were\n   458 497 462 511 0\n\nSee also: tess_run_pipeline, tess_pipeline_unlv,           tess_pipeline_lstm_box\n\n\n\n\n\ntess_pipeline_word_box(\n    pipe::TessPipeline\n)::Union{TessOutput{String}, Nothing}\n\nGenerate a BOX file from the pipeline and save it to a string.  Returns nothing if there is a problem adding the BOX generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the BOX data from.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\nbook = tess_pipeline_word_box(pipeline)\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\nfor line in split(book[], \"\\n\")[1:10]\n    println(line)\nend\n\n# output\n\nWordStr 11 577 417 591 0 #No one would have believed in the last years of the\n   418 577 422 591 0\nWordStr 11 557 457 571 0 #the nineteenth century that this world was being watched\n   458 557 462 571 0\nWordStr 10 537 457 551 0 #watched keenly and closely by intelligences greater than\n   458 537 462 551 0\nWordStr 11 517 481 531 0 #than man’s and yet as mortal as his own; that as men busied\n   482 517 486 531 0\nWordStr 11 497 457 511 0 #busied themselves about their various concerns they were\n   458 497 462 511 0\n\nSee also: tess_run_pipeline, tess_pipeline_unlv,           tess_pipeline_lstm_box\n\n\n\n\n\ntess_pipeline_word_box(\n    func::Function,\n    pipe::TessPipeline\n)::Bool\n\nGenerate a BOX file from the pipeline and pass it back to the client via a callback. Returns false if there is a problem adding the BOX generator to the output.\n\nArguments:\n\nT Name Default Description\nR func  The function to call with the lines of text.\nR pipe  The pipline to collect the BOX data from.\n\nDetails:\n\nThe text will be passed to the caller one line at a time. The \"\\n\" line terminator will be included with the text.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\ncount = 0\ntess_pipeline_word_box(pipeline) do line\n    global count\n    if count < 10\n        print(line)\n    end\n    count += 1\nend\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\n# output\n\nWordStr 11 577 417 591 0 #No one would have believed in the last years of the\n   418 577 422 591 0\nWordStr 11 557 457 571 0 #the nineteenth century that this world was being watched\n   458 557 462 571 0\nWordStr 10 537 457 551 0 #watched keenly and closely by intelligences greater than\n   458 537 462 551 0\nWordStr 11 517 481 531 0 #than man’s and yet as mortal as his own; that as men busied\n   482 517 486 531 0\nWordStr 11 497 457 511 0 #busied themselves about their various concerns they were\n   458 497 462 511 0\ntrue\n\nSee also: tess_run_pipeline, tess_pipeline_unlv,           tess_pipeline_lstm_box\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_initialized_languages/","page":"Tesseract.tess_initialized_languages","title":"Tesseract.tess_initialized_languages","text":"tess_initialized_languages","category":"page"},{"location":"ref/tess_initialized_languages/#Tesseract.tess_initialized_languages","page":"Tesseract.tess_initialized_languages","title":"Tesseract.tess_initialized_languages","text":"tess_initialized_languages(\n    inst::TessInst\n)::Union{String, Nothing}\n\nRetrieve the last initialized language(s).  Returns nothing if there was an error.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to get the languages from.\n\nDetails:\n\nThis method returns the language string provided in the last tess_init() call.\n\nExample:\n\njulia> using Tesseract\n\njulia> download_languages(\"eng+fra\")\ntrue\n\njulia> instance = TessInst(\"eng+fra\")\nAllocated Tesseract instance.\n\njulia> tess_initialized_languages(instance)\n\"eng+fra\"\n\nSee also: tess_init\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_lstm_box/","page":"Tesseract.tess_lstm_box","title":"Tesseract.tess_lstm_box","text":"tess_lstm_box","category":"page"},{"location":"ref/tess_lstm_box/#Tesseract.tess_lstm_box","page":"Tesseract.tess_lstm_box","title":"Tesseract.tess_lstm_box","text":"tess_lstm_box(\n    inst::TessInst,\n    page::Integer = Int32(1)\n)::Union{String, Nothing}\n\nReturn the UTF-8 box file for LSTM training.  If there is an error 'nothing' is returned.\n\nArguments:\n\nT Name Default Description\nR inst  The Tesseract instance to call.\nO page Int32(1) The page to get the data for.\n\nDetails:\n\nThis method will call tess_recognize() if it has not been called yet for the image.\n\nExample:\n\nusing Tesseract\n\ndownload_languages()\n\ninstance = TessInst()\npix = sample_pix()\n\ntess_image(instance, pix)\ntess_resolution(instance, 72)\n\nbox = tess_lstm_box(instance)\n\nfor line in split(box, '\\n'; keepempty = false)[1:5]\n    println(line)\nend\n\n# output\n\nN 11 577 422 591 0\no 11 577 422 591 0\n  11 577 422 591 0\no 11 577 422 591 0\nn 11 577 422 591 0\n\nSee also: tess_unlv, tess_word_box, tess_text_box\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_write_bmp/","page":"Tesseract.pix_write_bmp","title":"Tesseract.pix_write_bmp","text":"pix_write_bmp","category":"page"},{"location":"ref/pix_write_bmp/#Tesseract.pix_write_bmp","page":"Tesseract.pix_write_bmp","title":"Tesseract.pix_write_bmp","text":"pix_write_bmp(\n    filename::AbstractString,\n    pix::Pix\n)::Bool\n\nWrite an image to a file in the BMP image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the file to write to.\nR pix  The image to write to the file.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\n\n\n\n\npix_write_bmp(\n    stream::IO,\n    pix::Pix\n)::Bool\n\nWrite an image to an IO stream in the BMP image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR stream  The stream to write to.\nR pix  The image to write to the stream.\n\n\n\n\n\npix_write_bmp(\n    pix::Pix\n)::Bool\n\nWrite an image to a byte array in the BMP image format.  If there is an error nothing is returned.\n\nArguments:\n\nT Name Default Description\nR pix  The image to write to the byte array.\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_param/","page":"Tesseract.TessParam","title":"Tesseract.TessParam","text":"TessParam","category":"page"},{"location":"ref/tess_param/#Tesseract.TessParam","page":"Tesseract.TessParam","title":"Tesseract.TessParam","text":"struct TessParam{T}\n    name::String\n    default::T\n    desc::String\n    debug::Bool\nend\n\nHolds details about the default value of a parameter.\n\nValues:\n\nName Description\nname The name/ID of the parameter.\ndefault The default value of the parameter.\ndesc The description of the variable.\ndebug True if the value is a debug parameter.\n\nDetails:\n\nThis structure currently comes in 3 flavors, T may be Float64, Int32, or a String based on the default value.\n\nSee also: tess_params_parsed, tess_get_param, tess_set_param\n\n\n\n\n\n","category":"type"},{"location":"ref/tess_recognize/","page":"Tesseract.tess_recognize","title":"Tesseract.tess_recognize","text":"tess_recognize","category":"page"},{"location":"ref/tess_recognize/#Tesseract.tess_recognize","page":"Tesseract.tess_recognize","title":"Tesseract.tess_recognize","text":"tess_recognize(\n    inst::TessInst\n)::Bool\n\nPerform the OCR extraction.  This will be called automatically if you call one of the retrieval functions so you don't need to call it directly.  Returns false if there was an error.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to perform the recognition with.\n\nExample:\n\njulia> using Tesseract\n\njulia> download_languages(\"eng+fra\")\ntrue\n\njulia> instance = TessInst(\"eng+fra\")\nAllocated Tesseract instance.\n\njulia> pix = sample_pix()\nImage (500, 600) at 32ppi\n\njulia> tess_image(instance, pix)\n\njulia> tess_resolution(instance, 72)\n\njulia> tess_recognize(instance)\ntrue\n\nSee also: tess_text, tess_hocr, tess_alto, tess_tsv, tess_parsed_tsv.\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_confidences/","page":"Tesseract.tess_confidences","title":"Tesseract.tess_confidences","text":"tess_confidences","category":"page"},{"location":"ref/tess_confidences/#Tesseract.tess_confidences","page":"Tesseract.tess_confidences","title":"Tesseract.tess_confidences","text":"tess_confidences(\n    inst::TessInst\n)::Union{Vector{Int}, Nothing}\n\nExtract the confidences in the words that where extracted from the image.\n\nArguments:\n\nT Name Default Description\nR inst  The Tesseract instance to call.\n\nDetails:\n\nThis method will call tess_recognize() if it has not been called yet for the image.\n\nExample:\n\nusing Tesseract\n\ndownload_languages()\n\ninstance = TessInst()\npix = sample_pix()\n\ntess_image(instance, pix)\ntess_resolution(instance, 72)\n\nconfidence = tess_confidences(instance)\n\n# output\n\n256-element Vector{Int64}:\n 95\n 95\n 92\n 92\n 96\n 96\n 96\n 96\n 96\n 96\n  ⋮\n 96\n 96\n 96\n 96\n 96\n 96\n 96\n 86\n 86\n\nSee also: tess_tsv, tess_parsed_tsv\n\n\n\n\n\n","category":"function"},{"location":"reference/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"reference/#D","page":"Index","title":"D","text":"","category":"section"},{"location":"reference/","page":"Index","title":"Index","text":"Type Description\ndownload_pdf_font Download the PDF font file needed to create PDF images.\ndownload_languages Download the language data files needed to OCR an image.","category":"page"},{"location":"reference/#G","page":"Index","title":"G","text":"","category":"section"},{"location":"reference/","page":"Index","title":"Index","text":"Type Description\nGitHubProject Describes a GitHub repository to download data files from.","category":"page"},{"location":"reference/#I","page":"Index","title":"I","text":"","category":"section"},{"location":"reference/","page":"Index","title":"Index","text":"Type Description\nIFF Image enumeration to identify image types.","category":"page"},{"location":"reference/#L","page":"Index","title":"L","text":"","category":"section"},{"location":"reference/","page":"Index","title":"Index","text":"Type Description\nlept_version Retrieve the version of the Leptonica library.","category":"page"},{"location":"reference/#P","page":"Index","title":"P","text":"","category":"section"},{"location":"reference/","page":"Index","title":"Index","text":"Type Description\nPix Picture object to perform OCR on.\nPixBox Picture box to reference an area inside a Pix object.\npix_delete! Manually free a image.\npix_get_depth Retrieve the color bit depth of the image in BPP.\npix_get_dimensions Retrieve the image width, height, and color bit depth.\npix_read Read an image from disk, memory, or a stream.\npix_read_bmp Read a BMP image from disk, memory, or a stream.\npix_read_gif Read a GIF image from disk, memory, or a stream.\npix_read_jp2k Read a JP2K image from disk, memory, or a stream.\npix_read_jpeg Read a JPEG image from disk, memory, or a stream.\npix_read_png Read a PNG image from disk, memory, or a stream.\npix_read_pnm Read a PNM image from disk, memory, or a stream.\npix_read_spix Read a SPIX image from disk, memory, or a stream.\npix_read_tiff Read a TIFF image from disk, memory, or a stream.\npix_read_webp Read a WEBP image from disk, memory, or a stream.\npix_write Write an image to disk, memory or a stream.\npix_write_implied_format Write an image to disk.\npix_write_bmp Write image to disk, memory or a stream as a BMP file.\npix_write_gif Write image to disk, memory or a stream as a GIF file.\npix_write_jp2k Write image to disk, memory or a stream as a JP2K file.\npix_write_jpeg Write image to disk, memory or a stream as a JPEG file.\npix_write_pam Write image to disk, memory or a stream as a PAM file.\npix_write_pdf Write image to disk, memory or a stream as a PDF file.\npix_write_png Write image to disk, memory or a stream as a PNG file.\npix_write_pnm Write image to disk, memory or a stream as a PNM file.\npix_write_ps Write image to disk, memory or a stream as a PostScript file.\npix_write_spix Write image to disk, memory or a stream as a SPIX file.\npix_write_tiff Write image to disk, memory or a stream as a TIFF file.\npix_write_webp Write image to disk, memory or a stream as a WEBP file.","category":"page"},{"location":"reference/#S","page":"Index","title":"S","text":"","category":"section"},{"location":"reference/","page":"Index","title":"Index","text":"Type Description\nsample_pix Create a sample image with text for testing.\nsample_tiff Create a sample TIFF file with text for testing.","category":"page"},{"location":"reference/#T","page":"Index","title":"T","text":"","category":"section"},{"location":"reference/","page":"Index","title":"Index","text":"Type Description\nTessInst Tesseract object to perform OCR functions.\nTessOutput Holds the result of an operation that will be returned later.\nTessParam Object that describes a parameter than can be set in TessInst.\nTessPipeline Object used to process a sequence of pages.\ntess_alto Extract the text on the image as an ALTO xml format.\ntess_confidences Retrieve the condidences of the OCR results.\ntess_delete! Manually free a TessInst or TessPipeline object.\ntess_available_languages Retrieve the list of languages that can be loaded.\ntess_get_param Retrieve the value of a parameter from the Tesseract engine.\ntess_hocr Extract the text on the image as a HOCR xml format.\ntess_image Set the image to OCR.\ntess_init Change the languages to OCR.\ntess_initialized_languages Retrieve the list of languages loaded by tess_init.\ntess_loaded_languages Retrieve the list of languages actually loaded.\ntess_lstm_box Extract the text on the image as a LSTM box text format.\ntess_params Retrieve the list of parameters as a string.\ntess_params_parsed Retrieve the list of parameters as an array of TessParam objects.\ntess_parsed_tsv Extract the text on the image as a parsed TSV format.\ntess_pipeline_alto Add an ALTO XML output renderer to a Pipeline.\ntess_pipeline_hocr Add a HOCR XML output renderer to a Pipeline.\ntess_pipeline_lstm_box Add a LSTM BOX output renderer to a Pipeline.\ntess_pipeline_pdf Add a PDF output renderer to a Pipeline.\ntess_pipeline_text Add a text output renderer to a Pipeline.\ntess_pipeline_tsv Add a Tabbed Separated Value output renderer to a Pipeline.\ntess_pipeline_unlv Add a UNLV/UTF-8 renderer to a Pipeline.\ntess_pipeline_unlv_latin1 Add a UNLV/Latin1 renderer to a Pipeline.\ntess_pipeline_word_box Add a Word BOX output renderer to a Pipeline.\ntess_read_config Read and set variables from the specified configuration file.\ntess_read_debug_config Read and set the debug variables from the specified configuration file.\ntess_recognize Perform the OCR extraction on the image.\ntess_resolution Set the resolution of the image to OCR.\ntess_run_pipeline Execute the pipeline, processing multiple pictures.\ntess_set_param Set the value of a parameter from the Tesseract engine.\ntess_text Extract the text on the image as text.\ntess_text_box Extract the text on the image in text box format.\ntess_tsv Extract the text on the image in the TSV text format.\nTsv Object containing the details of a Tabbed Separated Value (TSV) line.\ntess_unlv Extract the text on the image in the UNLV UTF-8 text format.\ntess_unlv_latin1 Extract the text on the image in the UNLV Latin1 format.\ntess_word_box Extract the text on the image in word box text format.","category":"page"},{"location":"reference/#U","page":"Index","title":"U","text":"","category":"section"},{"location":"reference/","page":"Index","title":"Index","text":"Type Description\nupdate_pdf_font Update the PDF font file needed to create PDF images.\nupdate_languages Update the language data files needed to OCR an image.","category":"page"},{"location":"ref/tess_resolution/","page":"Tesseract.tess_resolution","title":"Tesseract.tess_resolution","text":"tess_resolution","category":"page"},{"location":"ref/tess_resolution/#Tesseract.tess_resolution","page":"Tesseract.tess_resolution","title":"Tesseract.tess_resolution","text":"tess_resolution(\n    inst::TessInst, # The instance to configure.\n    ppi             # The PPI of the source image.\n)::Nothing\n\nSet the resolution of the image in ppi.\n\nArguments:\n\nT Name Default Description\nR inst  The instance of load the image into.\nR ppi  The PPI (pixels per inch) of the source image.\n\nExample:\n\njulia> using Tesseract\n\njulia> download_languages()\ntrue\n\njulia> instance = TessInst()\nAllocated Tesseract instance.\n\njulia> pix = sample_pix()\nImage (500, 600) at 32ppi\n\njulia> tess_image(instance, pix)\n\njulia> tess_resolution(instance, 72)\n\nSee also: tess_image\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_pipeline_hocr/","page":"Tesseract.tess_pipeline_hocr","title":"Tesseract.tess_pipeline_hocr","text":"tess_pipeline_hocr","category":"page"},{"location":"ref/tess_pipeline_hocr/#Tesseract.tess_pipeline_hocr","page":"Tesseract.tess_pipeline_hocr","title":"Tesseract.tess_pipeline_hocr","text":"tess_pipeline_hocr(\n    pipe::TessPipeline,\n    filename::AbstractString,\n    fontInfo::Bool = false\n)::Bool\n\nGenerate a HOCR file from the pipeline and save it to the specified file.  Returns false if there is a problem adding the HOCR generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the HORC text from.\nR filename  The file to write the HORC text to.\nO fontInfo false Should font information be included in the output?\n\nDetails:\n\nIf the file exists it will be overwritten.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\ntess_pipeline_hocr(pipeline, \"My Book.hocr\")\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\nfor line in readlines(\"My Book.hocr\")[1:10]\n    println(line)\nend\n\n# output\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n    <head>\n        <title>My First Book</title>\n        <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n        <meta name='ocr-system' content='tesseract 5.1.0' />\n        <meta name='ocr-capabilities' content='ocr_page ocr_carea ocr_par ocr_line ocrx_word ocrp_wconf'/>\n    </head>\n\nSee also: tess_run_pipeline, tess_pipeline_alto,           tess_pipeline_pdf, tess_pipeline_text           tess_pipeline_tsv\n\n\n\n\n\ntess_pipeline_hocr(\n    pipe::TessPipeline,\n    fontInfo::Bool = false\n)::Union{TessOutput{String}, Nothing}\n\nGenerate an HOCR file from the pipeline and save it to a string.  Returns nothing if there is a problem adding the HOCR generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the HOCR text from.\nO fontInfo false Should font information be included in the output?\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\nbook = tess_pipeline_hocr(pipeline)\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\nfor line in split(book[], \"\\n\")[1:10]\n    println(line)\nend\n\n# output\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n    <head>\n        <title>My First Book</title>\n        <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n        <meta name='ocr-system' content='tesseract 5.1.0' />\n        <meta name='ocr-capabilities' content='ocr_page ocr_carea ocr_par ocr_line ocrx_word ocrp_wconf'/>\n    </head>\n\nSee also: tess_run_pipeline, tess_pipeline_alto,           tess_pipeline_pdf, tess_pipeline_text           tess_pipeline_tsv\n\n\n\n\n\ntess_pipeline_hocr(\n    func::Function,\n    pipe::TessPipeline,\n    fontInfo::Bool = false\n)::Bool\n\nGenerate an HOCR file from the pipeline and pass it back to the client via a callback. Returns false if there is a problem adding the HOCR generator to the output.\n\nArguments:\n\nT Name Default Description\nR func  The function to call with the lines of text.\nR pipe  The pipline to collect the text from.\nO fontInfo false Should font information be included in the output?\n\nDetails:\n\nThe text will be passed to the caller one line at a time. The \"\\n\" line terminator will be included with the text.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\ncount = 0\ntess_pipeline_hocr(pipeline) do line\n    global count\n    if count < 10\n        print(line)\n    end\n    count += 1\nend\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\n# output\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n    <head>\n        <title>My First Book</title>\n        <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n        <meta name='ocr-system' content='tesseract 5.1.0' />\n        <meta name='ocr-capabilities' content='ocr_page ocr_carea ocr_par ocr_line ocrx_word ocrp_wconf'/>\n    </head>\ntrue\n\nSee also: tess_run_pipeline, tess_pipeline_alto,           tess_pipeline_pdf, tess_pipeline_text           tess_pipeline_tsv\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_pipeline_lstm_box/","page":"Tesseract.tess_pipeline_lstm_box","title":"Tesseract.tess_pipeline_lstm_box","text":"tess_pipeline_lstm_box","category":"page"},{"location":"ref/tess_pipeline_lstm_box/#Tesseract.tess_pipeline_lstm_box","page":"Tesseract.tess_pipeline_lstm_box","title":"Tesseract.tess_pipeline_lstm_box","text":"tess_pipeline_lstm_box(\n    pipe::TessPipeline,\n    filename::AbstractString\n)::Bool\n\nGenerate a LSTM BOX file from the pipeline and save it to the specified file.  Returns false if there is a problem adding the LSTM BOX generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the LSTM BOX from.\nR filename  The file to write the LSTM BOX to.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\ntess_pipeline_lstm_box(pipeline, \"My Book.box\")\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\n    true\nend\n\nfor line in readlines(\"My Book.box\")[1:10]\n    println(line)\nend\n\n# output\n\nN 11 577 422 591 0\no 11 577 422 591 0\n  11 577 422 591 0\no 11 577 422 591 0\nn 11 577 422 591 0\ne 11 577 422 591 0\n  11 577 422 591 0\nw 11 577 422 591 0\no 11 577 422 591 0\nu 11 577 422 591 0\n\nSee also: tess_run_pipeline, tess_pipeline_word_box,           tess_pipeline_unlv\n\n\n\n\n\ntess_pipeline_lstm_box(\n    pipe::TessPipeline\n)::Union{TessOutput{String}, Nothing}\n\nGenerate a LSTM BOX file from the pipeline and save it to a string.  Returns nothing if there is a problem adding the LSTM BOX generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the LSTM BOX data from.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\nbook = tess_pipeline_lstm_box(pipeline)\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\nfor line in split(book[], \"\\n\")[1:10]\n    println(line)\nend\n\n# output\n\nN 11 577 422 591 0\no 11 577 422 591 0\n  11 577 422 591 0\no 11 577 422 591 0\nn 11 577 422 591 0\ne 11 577 422 591 0\n  11 577 422 591 0\nw 11 577 422 591 0\no 11 577 422 591 0\nu 11 577 422 591 0\n\nSee also: tess_run_pipeline, tess_pipeline_word_box,           tess_pipeline_unlv\n\n\n\n\n\ntess_pipeline_lstm_box(\n    func::Function,\n    pipe::TessPipeline\n)::Bool\n\nGenerate a LSTM BOX file from the pipeline and pass it back to the client via a callback. Returns false if there is a problem adding the LSTM BOX generator to the output.\n\nArguments:\n\nT Name Default Description\nR func  The function to call with the lines of text.\nR pipe  The pipline to collect the LSTM BOX data from.\n\nDetails:\n\nThe text will be passed to the caller one line at a time. The \"\\n\" line terminator will be included with the text.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\ncount = 0\ntess_pipeline_lstm_box(pipeline) do line\n    global count\n    if count < 10\n        print(line)\n    end\n    count += 1\nend\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\n# output\n\nN 11 577 422 591 0\no 11 577 422 591 0\n  11 577 422 591 0\no 11 577 422 591 0\nn 11 577 422 591 0\ne 11 577 422 591 0\n  11 577 422 591 0\nw 11 577 422 591 0\no 11 577 422 591 0\nu 11 577 422 591 0\ntrue\n\nSee also: tess_run_pipeline, tess_pipeline_word_box,           tess_pipeline_unlv\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_pipeline_text/","page":"Tesseract.tess_pipeline_text","title":"Tesseract.tess_pipeline_text","text":"tess_pipeline_text","category":"page"},{"location":"ref/tess_pipeline_text/#Tesseract.tess_pipeline_text","page":"Tesseract.tess_pipeline_text","title":"Tesseract.tess_pipeline_text","text":"tess_pipeline_text(\n    pipe::TessPipeline,\n    filename::AbstractString\n)::Bool\n\nGenerate a text file from the pipeline and save it to the specified file.  Returns false if there is a problem adding the text generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the text from.\nR filename  The file to write the text to.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\ntess_pipeline_text(pipeline, \"My Book.txt\")\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\nfor line in readlines(\"My Book.txt\")[1:10]\n    println(line)\nend\n\n# output\n\nNo one would have believed in the last years of the\n\nthe nineteenth century that this world was being watched\nwatched keenly and closely by intelligences greater than\nthan man’s and yet as mortal as his own; that as men busied\nbusied themselves about their various concerns they were\nwere scrutinised and studied, perhaps almost as narrowly as\nas a man with a microscope might scrutinise the transient\ntransient creatures that swarm and multiply in a drop of\n\nSee also: tess_run_pipeline, tess_pipeline_alto,           tess_pipeline_hocr, tess_pipeline_pdf           tess_pipeline_tsv\n\n\n\n\n\ntess_pipeline_text(\n    pipe::TessPipeline\n)::Union{TessOutput{String}, Nothing}\n\nGenerate a text file from the pipeline and save it to a string.  Returns nothing if there is a problem adding the text generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the text from.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\nbook = tess_pipeline_text(pipeline)\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\ncount = 0\nfor line in split(book[], \"\\n\")[1:10]\n    global count\n    if count < 10\n        println(line)\n    end\n    count += 1\nend\n\n# output\n\nNo one would have believed in the last years of the\n\nthe nineteenth century that this world was being watched\nwatched keenly and closely by intelligences greater than\nthan man’s and yet as mortal as his own; that as men busied\nbusied themselves about their various concerns they were\nwere scrutinised and studied, perhaps almost as narrowly as\nas a man with a microscope might scrutinise the transient\ntransient creatures that swarm and multiply in a drop of\n\nSee also: tess_run_pipeline, tess_pipeline_alto,           tess_pipeline_hocr, tess_pipeline_pdf           tess_pipeline_tsv\n\n\n\n\n\ntess_pipeline_text(\n    func::Function,\n    pipe::TessPipeline\n)::Union{TessOutput, Nothing}\n\nGenerate a text file from the pipeline and pass it back to the client via a callback. Returns false if there is a problem adding the text generator to the output.\n\nArguments:\n\nT Name Default Description\nR func  The function to call with the lines of text.\nR pipe  The pipline to collect the text from.\n\nDetails:\n\nThe text will be passed to the caller one line at a time. The \"\\n\" line terminator will be included with the text.\n\nTesseract inserts a \"page separator\" between pages, by default this value is \"\\f\", however it can be changed with tess_set_param.  If you want to use different text to separate the pages you must set the value before calling this function.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\ncount = 0\ntess_pipeline_text(pipeline) do line\n    global count\n    if count < 10\n        print(line)\n    end\n    count += 1\nend\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\n# output\n\nNo one would have believed in the last years of the\n\nthe nineteenth century that this world was being watched\nwatched keenly and closely by intelligences greater than\nthan man’s and yet as mortal as his own; that as men busied\nbusied themselves about their various concerns they were\nwere scrutinised and studied, perhaps almost as narrowly as\nas a man with a microscope might scrutinise the transient\ntransient creatures that swarm and multiply in a drop of\n\ntrue\n\nSee also: tess_run_pipeline, tess_pipeline_alto,           tess_pipeline_hocr, tess_pipeline_pdf           tess_pipeline_tsv\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_version/","page":"Tesseract.tess_version","title":"Tesseract.tess_version","text":"tess_version","category":"page"},{"location":"ref/tess_version/#Tesseract.tess_version","page":"Tesseract.tess_version","title":"Tesseract.tess_version","text":"tess_version()::String\n\nReturn the version number of the tesseract library.\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_write_gif/","page":"Tesseract.pix_write_gif","title":"Tesseract.pix_write_gif","text":"pix_write_gif","category":"page"},{"location":"ref/pix_write_gif/#Tesseract.pix_write_gif","page":"Tesseract.pix_write_gif","title":"Tesseract.pix_write_gif","text":"pix_write_gif(\n    filename::AbstractString,\n    pix::Pix\n)::Bool\n\nWrite an image to a file in the GIF image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the file to write to.\nR pix  The image to write to the file.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\n\n\n\n\npix_write_gif(\n    stream::IO,\n    pix::Pix\n)::Bool\n\nWrite an image to an IO stream in the GIF image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR stream  The IO stream to write to.\nR pix  The image to write to the stream.\n\n\n\n\n\npix_write_gif(\n    pix::Pix\n)::Union{Vector{UInt8}, Nothing}\n\nWrite an image to a byte array in the GIF image format.  If there is an error nothing is returned.\n\nArguments:\n\nT Name Default Description\nR pix  The image to write to the byte array.\n\n\n\n\n\n","category":"function"},{"location":"ref/tsv/","page":"Tesseract.Tsv","title":"Tesseract.Tsv","text":"Tsv","category":"page"},{"location":"ref/tsv/#Tesseract.Tsv","page":"Tesseract.Tsv","title":"Tesseract.Tsv","text":"struct Tsv\n    level::Int\n    page::Int\n    block::Int\n    paragraph::Int\n    line::Int\n    word::Int\n    left::Int\n    top::Int\n    width::Int\n    height::Int\n    conf::Float32\n    text::String\nend\n\nThis structure holds the details of a line in the TSV formatted text provided by the tesseract library.\n\nValues:\n\nName Description\nlevel Identifies what the line describes.\npage This is the page number passed into the tess_tsv() method.\nblock Identifies the block on the page.\nparagraph The paragraph number in the block.\nline The line in the paragraph.\nword The word in the line.\nleft Left edge of the item in pixels.\ntop Top edge of the item in pixels.\nwidth Width of the item in pixels.\nheight Height of the item in pixels.\nconf How confident the OCR engine is of the word (0 - 100). -1 if level is not 5.\ntext The word that was decoded from the image.\n\nDetails:\n\nLevel identifies what information the line is providing:\n\n1 - Page information, added at the start of the page.\n2 - Block information, added at the start of a block.\n3 - Paragraph information, added at the start of a paragraph.\n4 - Line information, added at the start of a line.\n5 - Word information, identifies a word that was read from the page.\n\nThe left, top, width, and height values define a box in pixels that encompases the item.  So if the level is 1, the box describes the whole image.  If the level is 1, then the box encloses the block that was extracted, and so on down to the word that was extracted.\n\nSee also: tess_parsed_tsv\n\n\n\n\n\n","category":"type"},{"location":"ref/pix/","page":"Tesseract.Pix","title":"Tesseract.Pix","text":"Pix","category":"page"},{"location":"ref/pix/#Tesseract.Pix","page":"Tesseract.Pix","title":"Tesseract.Pix","text":"mutable struct Pix\n    ptr::Ptr{Cvoid}\nend\n\nA wrapper for the PIX structure in the leptonica library.\n\nValues:\n\nName Description\nptr The pointer to the Pix object allocated by the C library.\n\nDetails:\n\nWhen the garbage collector collects this object the associated PIX object will be freed in the library.\n\n\n\n\n\n","category":"type"},{"location":"ref/pix_read/","page":"Tesseract.pix_read","title":"Tesseract.pix_read","text":"pix_read","category":"page"},{"location":"ref/pix_read/#Tesseract.pix_read","page":"Tesseract.pix_read","title":"Tesseract.pix_read","text":"pix_read(\n    filename::AbstractString;\n    jpgLuminance::Bool = false,\n    jpgFailOnBadData::Bool = false\n)::Union{Pix, Nothing}\n\nLoad an image from from disk of an unspecified type.  Returns nothing if the file could not be loaded.\n\nArguments:\n\nT Name Default Description\nR filename  The filename of the image to load.\nO jpgLuminance false If the image is a JPEG should we only load luminance data?\nO jpgFailOnBadData false If the image is a JPEG should we ignore bit errors?\n\nDetails:\n\nThe two optional parameters are obviously ignored if the image is not a JPEG.\n\n\n\n\n\npix_read(\n    stream::IO\n)::Union{Pix, Nothing}\n\nLoad an image from from a stream.  Returns nothing if the file could not be loaded.\n\nArguments:\n\nT Name Default Description\nR stream  The stream to read the image from.\n\nDetails:\n\nThis implementation mirrors the API provided by Leptonica when you pass in a FILE pointer. This assumes that the remainder of the stream contains an image, so the remainder of the stream will be read and decoded as an image.\n\n\n\n\n\npix_read(\n    data::AbstractArray{UInt8}\n)::Union{Pix, Nothing}\n\nLoad an image from from a byte array.  Returns nothing if the file could not be loaded.\n\nArguments:\n\nT Name Default Description\nR data  The byte array to read the image from.\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_read_gif/","page":"Tesseract.pix_read_gif","title":"Tesseract.pix_read_gif","text":"pix_read_gif","category":"page"},{"location":"ref/pix_read_gif/#Tesseract.pix_read_gif","page":"Tesseract.pix_read_gif","title":"Tesseract.pix_read_gif","text":"pix_read_gif(\n    filename::AbstractString\n)::Union{Pix, Nothing}\n\nRead a GIF image from the specified file.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the GIF file to load.\n\n\n\n\n\npix_read_gif(\n    stream::IO\n)::Union{Pix, Nothing}\n\nRead a GIF image from the specified stream.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR stream  The IO stream to read the GIF file from.\n\nDetails:\n\nThis implementation mirrors the API provided by Leptonica when you pass in a FILE pointer. This assumes that the remainder of the stream contains a GIF image.\n\n\n\n\n\npix_read_gif(\n    data::AbstractArray{UInt8}\n)::Union{Pix, Nothing}\n\nRead a GIF image from the byte array.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR data  The byte array to read the GIF image from.\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_write_png/","page":"Tesseract.pix_write_png","title":"Tesseract.pix_write_png","text":"pix_write_png","category":"page"},{"location":"ref/pix_write_png/#Tesseract.pix_write_png","page":"Tesseract.pix_write_png","title":"Tesseract.pix_write_png","text":"pix_write_png(\n    filename::AbstractString,\n    pix::Pix\n    gamma::AbstractFloat = Float32(0.0)\n)::Bool\n\nWrite an image to a file in the PNG image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the file to write to.\nR pix  The image to write to the file.\nO gamma Float32(0.0) The gamma value to write to the header.\n\nRestrictions:\n\ngamma - Must be in the range 0.0 to 1.0 inclusively.\n\nDetails:\n\nIf the file exists it will be overwritten.  If gamma is set to 0.0 then no gamma value will be written to the file.\n\n\n\n\n\npix_write_png(\n    stream::IO,\n    pix::Pix\n    gamma::AbstractFloat = Float32(0.0)\n)::Bool\n\nWrite an image to a stream in the PNG image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR stream  The stream to write the data to.\nR pix  The image to write to the stream.\nO gamma Float32(0.0) The gamma value to write to the header.\n\nRestrictions:\n\ngamma - Must be in the range 0.0 to 1.0 inclusively.\n\nDetails:\n\nIf gamma is set to 0.0 then no gamma value will be written in the image header.\n\n\n\n\n\npix_write_png(\n    pix::Pix\n    gamma::AbstractFloat = Float32(0.0)\n)::Union{Vector{UInt8}, Nothing}\n\nWrite an image to a byte array in the PNG image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR pix  The image to write to a byte array.\nO gamma Float32(0.0) The gamma value to write to the header.\n\nRestrictions:\n\ngamma - Must be in the range 0.0 to 1.0 inclusively.\n\nDetails:\n\nIf gamma is set to 0.0 then no gamma value will be written in the image header.\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_image/","page":"Tesseract.tess_image","title":"Tesseract.tess_image","text":"tess_image","category":"page"},{"location":"ref/tess_image/#Tesseract.tess_image","page":"Tesseract.tess_image","title":"Tesseract.tess_image","text":"tess_image(\n        inst::TessInst,\n        pix::Pix\n    )::Nothing\n\nSet the image to be OCRed.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to load the image into.\nR pix  The image to load into Tesseract to perform OCR.\n\nDetails:\n\nOnly 1 image can be set, calling this multiple times will replace the last image.\n\nExample:\n\njulia> using Tesseract\n\njulia> download_languages()\ntrue\n\njulia> instance = TessInst()\nAllocated Tesseract instance.\n\njulia> pix = sample_pix()\nImage (500, 600) at 32ppi\n\njulia> tess_image(instance, pix)\n\nSee also: tess_resolution, pix_read\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_read_jp2k/","page":"Tesseract.pix_read_jp2k","title":"Tesseract.pix_read_jp2k","text":"pix_read_jp2k","category":"page"},{"location":"ref/pix_read_jp2k/#Tesseract.pix_read_jp2k","page":"Tesseract.pix_read_jp2k","title":"Tesseract.pix_read_jp2k","text":"pix_read_jp2k(\n    filename::AbstractString;\n    reduction::Integer = Int32(1),\n    box::Union{PixBox, Nothing} = nothing\n)::Union{Pix, Nothing}\n\nRead a JP2K image from the specified file.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the JP2K file to load.\nO reduction Int32(1) Load a reduced version of the image from the file.\nO box nothing Specifies a region to extract from the image.\n\nRestrictions:\n\nreduction - Must be a factor of 2.\n\n\n\n\n\npix_read_jp2k(\n    stream::IO;\n    reduction::Integer = Int32(1),\n    box::Union{PixBox, Nothing} = nothing\n)::Union{Pix, Nothing}\n\nRead a JP2K image from the specified stream.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR stream  The IO stream to read the JP2K file from.\nO reduction Int32(1) Load a reduced version of the image from the file.\nO box nothing Specifies a region to extract from the image.\n\nRestrictions:\n\nreduction - Must be a factor of 2.\n\nDetails:\n\nThis implementation mirrors the API provided by Leptonica when you pass in a FILE pointer. This assumes that the remainder of the stream contains a JP2K image.\n\n\n\n\n\npix_read_jp2k(\n    data::AbstractArray{UInt8};\n    reduction::Integer = Int32(1),\n    box::Union{PixBox, Nothing} = nothing\n)::Union{Pix, Nothing}\n\nRead a JP2K image from the byte array.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR data  The byte array to read the JP2K image from.\nO reduction Int32(1) Load a reduced version of the image from the file.\nO box nothing Specifies a region to extract from the image.\n\nRestrictions:\n\nreduction - Must be a factor of 2.\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_text/","page":"Tesseract.tess_text","title":"Tesseract.tess_text","text":"tess_text","category":"page"},{"location":"ref/tess_text/#Tesseract.tess_text","page":"Tesseract.tess_text","title":"Tesseract.tess_text","text":"tess_text(\n    inst::TessInst\n)::Union{String, Nothing}\n\nExtract the text from the image. If there is an error nothing will be returned.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to grab the text from.\n\nDetails:\n\nThis method will call tess_recognize() if it has not been called yet for the image.\n\nExample:\n\nusing Tesseract\n\ndownload_languages()\n\ninstance = TessInst()\npix = sample_pix()\n\ntess_image(instance, pix)\ntess_resolution(instance, 72)\n\ntext = tess_text(instance)\n\nfor line in split(text, '\\n'; keepempty = false)[1:5]\n    println(line)\nend\n\n# output\n\nNo one would have believed in the last years of the\nthe nineteenth century that this world was being watched\nwatched keenly and closely by intelligences greater than\nthan man’s and yet as mortal as his own; that as men busied\nbusied themselves about their various concerns they were\n\nSee also: tess_hocr, tess_alto, tess_tsv,           tess_parsed_tsv, tess_confidences\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_pipeline/","page":"Tesseract.TessPipeline","title":"Tesseract.TessPipeline","text":"TessPipeline\nTessPipeline(inst::TessInst)","category":"page"},{"location":"ref/tess_pipeline/#Tesseract.TessPipeline","page":"Tesseract.TessPipeline","title":"Tesseract.TessPipeline","text":"mutable struct TessPipeline\n    inst::TessInst\n    ptr::Ptr{Cvoid}\n    tasks::Vector{PipelineTask}\n    types::Vector{ResultRendererType}\nend\n\nAllows the client to process multiple images in sequence.\n\nValues:\n\nName Description\ninst The TessInst that will be processing the images.\nptr The Tesseract pipeline that will be outputing the data.\ntask The list of background tasks associated with pipeline.\ntypes The list of renderers used in the pipeline.\n\nSee also: tess_run_pipeline\n\n\n\n\n\n","category":"type"},{"location":"ref/tess_pipeline/#Tesseract.TessPipeline-Tuple{TessInst}","page":"Tesseract.TessPipeline","title":"Tesseract.TessPipeline","text":"TessPipeline(\n    inst::TessInst\n)\n\nConstruct a new instance of the object.  Registers a finalizer to clean up allocated resources.\n\nName Description\ninst The TessInst that will be processing the images.\n\nSee also: tess_run_pipeline\n\n\n\n\n\n","category":"method"},{"location":"single/#Process-a-single-image","page":"Process a single image","title":"Process a single image","text":"","category":"section"},{"location":"single/","page":"Process a single image","title":"Process a single image","text":"This method is normally used if you just want to extract the text from an image.  If you want something more like advanced like an ALTO XML, HOCR XML, or PDF file, then you would want to read the next section on scanning multiple files.","category":"page"},{"location":"single/","page":"Process a single image","title":"Process a single image","text":"using Tesseract\n\ndownload_languages()\n\ninstance = TessInst()\npix = sample_pix()\n\ntess_image(instance, pix)\ntess_resolution(instance, 72)\n\ntext = tess_text(instance)\n\nprint(text)\n\n# output\n\nNo one would have believed in the last years of the\n\nthe nineteenth century that this world was being watched\nwatched keenly and closely by intelligences greater than\nthan man’s and yet as mortal as his own; that as men busied\nbusied themselves about their various concerns they were\nwere scrutinised and studied, perhaps almost as narrowly as\nas a man with a microscope might scrutinise the transient\ntransient creatures that swarm and multiply in a drop of\n\nof water. With infinite complacency men went to and fro over\nover this globe about their little affairs, serene in their\ntheir assurance of their empire over matter. It is possible\npossible that the infusoria under the microscope do the\n\nthe same. No one gave a thought to the older worlds of space\nspace as sources of human danger, or thought of them only to\nto dismiss the idea of life upon them as impossible or\n\nor improbable. It is curious to recall some of the mental\nmental habits of those departed days. At most terrestrial\nterrestrial men fancied there might be other men upon Mars,\nMars, perhaps inferior to themselves and ready to welcome a\na missionary enterprise. Vet across the gulf of space, minds\nminds that are to our minds as ours are to those of the\n\nthe beasts that perish, intellects vast and cool and\n\nand unsympathetic, regarded this earth with envious eyes\neyes, and slowly and surely drew their plans against us. And\nAnd early in the twentieth century came the great\n\ngreat disillusionment.","category":"page"},{"location":"single/","page":"Process a single image","title":"Process a single image","text":"This example uses sample_pix to get an image with text to test with.  Normally you would use pix_read to load an image from disk.  Next tess_image is called to pass the image to Tesseract for OCRing.  You need to call tess_resolution to let Tesseract know the PPI of the image.  For a scanned image this will probably be 300, 600, or higher.","category":"page"},{"location":"single/","page":"Process a single image","title":"Process a single image","text":"Finally to get the text Tesseract found you make a call to tess_text to retrieve the text.  This method will call tess_recognize if it has not been called already.  You might also be interested in calling tess_confidences to get Tesseract's confidence in the OCR process for each word.  Calling tess_parsed_tsv is also helpful to get the details for each word found on the page.","category":"page"},{"location":"download/#Download-required-files","page":"Download required files","title":"Download required files","text":"","category":"section"},{"location":"download/","page":"Download required files","title":"Download required files","text":"julia> using Tesseract\n\njulia> download_languages(\"eng+spa\")\ntrue\n\njulia> download_pdf_font()\ntrue","category":"page"},{"location":"download/","page":"Download required files","title":"Download required files","text":"Tesseract.jl does not contain the language files needed by Tesseract to perform OCR on images.  These files must be downloaded separately, and are multiple megabytes in size, so only the languages you are interested in can be downloaded.  Languages are specified using ISO 639-3 language codes with a plus sign(+) between them.","category":"page"},{"location":"download/","page":"Download required files","title":"Download required files","text":"By default the files are downloaded from https://github.com/tesseract-ocr/tessdata_best.  Unless told to overwrite the existing file download_languages only downloads the file is it doesn't already exist.  download_pdf_font is only needed if you want to generate searchable PDF files.  Again is only downloads the file if it has not already been downloaded.  The PDF font file is normally downloaded from https://github.com/tesseract-ocr/tessconfigs.","category":"page"},{"location":"ref/pix_write/","page":"Tesseract.pix_write","title":"Tesseract.pix_write","text":"pix_write","category":"page"},{"location":"ref/pix_write/#Tesseract.pix_write","page":"Tesseract.pix_write","title":"Tesseract.pix_write","text":"pix_write(\n    filename::String,\n    pix::Pix,\n    format::IFF = IFF_DEFAULT\n)::Bool\n\nWrite an image to disk in the specified format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR filename  The filename to write the image to.\nR pix  The image to write to disk.\nO format IFF_DEFAULT The image format to write the image out as.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\nIf format isn't specified Leptonica will choose the correct format to write the image as based on the input format.\n\n\n\n\n\npix_write(\n    stream::IO,\n    pix::Pix,\n    format::IFF = IFF_DEFAULT\n)::Bool\n\nWrite an image to the IO stream in the specified format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR stream  The stream to write the image to.\nR pix  The image to write to the stream.\nO format IFF_DEFAULT The image format to write the image out as.\n\nDetails:\n\nIf format isn't specified Leptonica will choose the correct format to write the image as based on the input format.\n\n\n\n\n\npix_write(\n    pix::Pix,\n    format::IFF = IFF_DEFAULT\n):::Union{Vector{UInt8}, Nothing}\n\nWrite an image to a byte array in the specified format.  If there is an error nothing is returned.\n\nArguments:\n\nT Name Default Description\nR pix  The image to write to the stream.\nO format IFF_DEFAULT The image format to write the image out as.\n\nDetails:\n\nIf format isn't specified Leptonica will choose the correct format to write the image as based on the input format.\n\n\n\n\n\n","category":"function"},{"location":"ref/update_pdf_font/","page":"Tesseract.update_pdf_font","title":"Tesseract.update_pdf_font","text":"update_pdf_font","category":"page"},{"location":"ref/update_pdf_font/#Tesseract.update_pdf_font","page":"Tesseract.update_pdf_font","title":"Tesseract.update_pdf_font","text":"update_pdf_font(;\n    target::AbstractString = \"tessdata\",\n    frequency::Integer = 7,\n    source::GitHubProject = PDF_FONT_REPO\n)::Bool\n\nUpdate the PDF font file.  This is only needed when generating PDF files.  Returns false if there was an error updating the files.\n\nArguments:\n\nT Name Default Description\nK target tessdata The directory to save the font file in.\nK frequency 7 How often to check for updates on the server in days.\nK source ... The GitHub project to download the font file from.\n\nDetails:\n\nBy default the data files are saved in a \"tessdata\" directory under the current directory. The training data is normally downloaded from the https://github.com/tesseract-ocr/tessdata_best GitHub project.\n\nSee also: download_pdf_font\n\n\n\n\n\n","category":"function"},{"location":"ref/lept_version/","page":"Tesseract.lept_version","title":"Tesseract.lept_version","text":"lept_version","category":"page"},{"location":"ref/lept_version/#Tesseract.lept_version","page":"Tesseract.lept_version","title":"Tesseract.lept_version","text":"lept_version()::String\n\nReturn the version number of the leptonica library.\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_write_spix/","page":"Tesseract.pix_write_spix","title":"Tesseract.pix_write_spix","text":"pix_write_spix","category":"page"},{"location":"ref/pix_write_spix/#Tesseract.pix_write_spix","page":"Tesseract.pix_write_spix","title":"Tesseract.pix_write_spix","text":"pix_write_spix(\n    filename::AbstractString,\n    pix::Pix\n)::Bool\n\nWrite an image to a file in the SPIX image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the file to write to.\nR pix  The image to write to the file.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\n\n\n\n\npix_write_spix(\n    stream::IO,\n    pix::Pix\n)::Bool\n\nWrite an image to an IO stream in the SPIX image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR stream  The stream to write the image to.\nR pix  The image to write to the file.\n\n\n\n\n\npix_write_spix(\n    pix::Pix\n)::Union{Vector{UInt8}, Nothing}\n\nWrite an image to a byte array in the SPIX image format.  If there is an error nothing is returned.\n\nArguments:\n\nT Name Default Description\nR pix  The image to write to a byte array.\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_write_tiff/","page":"Tesseract.pix_write_tiff","title":"Tesseract.pix_write_tiff","text":"pix_write_tiff","category":"page"},{"location":"ref/pix_write_tiff/#Tesseract.pix_write_tiff","page":"Tesseract.pix_write_tiff","title":"Tesseract.pix_write_tiff","text":"pix_write_tiff(\n    filename::AbstractString,\n    pix::Pix;\n    compression::IFF = IFF_TIFF,\n    append::Bool = false\n)::Bool\n\nWrite an image to a file in the TIFF image format. Returns false if there was an error.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the file to write to or create.\nR pix  The image to write to disk.\nO compression IFF_TIFF The compression to use on the image.\nO append false Should we overwrite the image or append it to the file.\n\nRestrictions:\n\ncompression - Must be a one of the following compression formats:\nIFF_TIFF - Supports all images.\nIFF_TIFF_RLE - Requires a b&w 1bpp image.\nIFF_TIFF_PACKBITS - Requires a b&w 1bpp image.\nIFF_TIFF_G3 - Requires a b&w 1bpp image.\nIFF_TIFF_G4 - Requires a b&w 1bpp image.\nIFF_TIFF_LZW - Supports all images.\nIFF_TIFF_ZIP - Supports all images.\nIFF_TIFF_JPEG - Supports all images.\n\nDetails:\n\nThe default compression is no compression.\n\nTIFF files can contain multiple image.  If a file does not exist it will be created.  If the file exists and append is false then the file will be overwritten.  If append is true then the image will be added to the file.\n\n\n\n\n\npix_write_tiff(\n    stream::IO,\n    pix::Pix;\n    compression::IFF = IFF_TIFF\n)::Bool\n\nWrite an image to an IO stream in the TIFF image format. Returns false if there was an error.\n\nArguments:\n\nT Name Default Description\nR stream  The stream to write the image to.\nR pix  The image to write to disk.\nO compression IFF_TIFF The compression to use on the image.\n\nRestrictions:\n\ncompression - Must be a one of the following compression formats:\nIFF_TIFF - Supports all images.\nIFF_TIFF_RLE - Requires a b&w 1bpp image.\nIFF_TIFF_PACKBITS - Requires a b&w 1bpp image.\nIFF_TIFF_G3 - Requires a b&w 1bpp image.\nIFF_TIFF_G4 - Requires a b&w 1bpp image.\nIFF_TIFF_LZW - Supports all images.\nIFF_TIFF_ZIP - Supports all images.\nIFF_TIFF_JPEG - Supports all images.\n\nDetails:\n\nThe default compression is no compression.\n\n\n\n\n\npix_write_tiff(\n    pix::Pix;\n    compression::IFF = IFF_TIFF\n)::Union{Vector{UInt8}, Nothing}\n\nWrite an image to an byte array in the TIFF image format. Returns nothing if there was an error.\n\nArguments:\n\nT Name Default Description\nR pix  The image to write to a byte array.\nO compression IFF_TIFF The compression to use on the image.\n\nRestrictions:\n\ncompression - Must be a one of the following compression formats:\nIFF_TIFF - Supports all images.\nIFF_TIFF_RLE - Requires a b&w 1bpp image.\nIFF_TIFF_PACKBITS - Requires a b&w 1bpp image.\nIFF_TIFF_G3 - Requires a b&w 1bpp image.\nIFF_TIFF_G4 - Requires a b&w 1bpp image.\nIFF_TIFF_LZW - Supports all images.\nIFF_TIFF_ZIP - Supports all images.\nIFF_TIFF_JPEG - Supports all images.\n\nDetails:\n\nThe default compression is no compression.\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_read_debug_config/","page":"Tesseract.tess_read_debug_config","title":"Tesseract.tess_read_debug_config","text":"tess_read_debug_config","category":"page"},{"location":"ref/tess_read_debug_config/#Tesseract.tess_read_debug_config","page":"Tesseract.tess_read_debug_config","title":"Tesseract.tess_read_debug_config","text":"tess_read_debug_config(\n    inst::TessInst,\n    filename::AbstractString\n)::Nothing\n\nLoad debug configuration settings from a file into the Tesseract instance.\n\nArguments:\n\nT Name Default Description\nR inst  The Tesseract instance to load the settings into.\nR filename  The name of the file to load the settings from.\n\nDetails:\n\nOnly the debug settings will be loaded, all other settings will be ignored.\n\nSee also: tess_read_config\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_inst/","page":"Tesseract.TessInst","title":"Tesseract.TessInst","text":"TessInst\nTessInst(languages::AbstractString, dataPath::AbstractString)","category":"page"},{"location":"ref/tess_inst/#Tesseract.TessInst","page":"Tesseract.TessInst","title":"Tesseract.TessInst","text":"mutable struct TessInst\n    ptr::Ptr{Cvoid}\nend\n\nA wrapper for the Api object in the Tesseract library.\n\nValues:\n\nName Description\nptr The pointer to the Api object allocated by the C library.\n\nDetails:\n\nMost method calls cannot use this object until tess_init() called on it for initialization.\n\nWhen the garbage collector collects this object the associated pointer object will be freed in the library.  The object can also be manually freed by calling tess_delete!() on it.\n\nSee also: TessInst(languages::AbstractString, dataPath::AbstractString).\n\n\n\n\n\n","category":"type"},{"location":"ref/tess_inst/#Tesseract.TessInst-Tuple{AbstractString, AbstractString}","page":"Tesseract.TessInst","title":"Tesseract.TessInst","text":"TessInst(\n    languages::AbstractString = \"eng\",\n    dataPath::AbstractString = TESS_DATA\n)\n\nConstruct an initialize a TessInst object.\n\nArguments:\n\nT Name Default Description\nO languages eng The language(s) to load.\nO dataPath tessdata The directory to look for the language files in.\n\nDetails:\n\nTo change the langauges identified by this instance you can call tess_init().  Multiple langagues can be specified by seperating them with a plus.  So if you want english and spanish you could specify \"eng+spa\".  The language codes are (usually) the ISO 639-3 code.\n\nExample:\n\njulia> using Tesseract\n\njulia> download_languages(\"eng+fra\")\ntrue\n\njulia> instance = TessInst(\"eng+fra\")\nAllocated Tesseract instance.\n\nSee also: tess_init.\n\n\n\n\n\n","category":"method"},{"location":"ref/pix_read_spix/","page":"Tesseract.pix_read_spix","title":"Tesseract.pix_read_spix","text":"pix_read_spix","category":"page"},{"location":"ref/pix_read_spix/#Tesseract.pix_read_spix","page":"Tesseract.pix_read_spix","title":"Tesseract.pix_read_spix","text":"pix_read_spix(\n    filename::AbstractString\n)::Union{Pix, Nothing}\n\nRead a SPIX image from the specified file.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the SPIX file to load.\n\n\n\n\n\npix_read_spix(\n    stream::IO\n)::Union{Pix, Nothing}\n\nRead a SPIX image from the specified stream.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR stream  The IO stream to read the SPIX file from.\n\nDetails:\n\nThis implementation mirrors the API provided by Leptonica when you pass in a FILE pointer. This assumes that the remainder of the stream contains a SPIX image.\n\n\n\n\n\npix_read_spix(\n    data::AbstractArray{UInt8}\n)::Union{Pix, Nothing}\n\nRead a SPIX image from the byte array.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR data  The byte array to read the SPIX image from.\n\n\n\n\n\n","category":"function"},{"location":"ref/download_languages/","page":"Tesseract.download_languages","title":"Tesseract.download_languages","text":"download_languages","category":"page"},{"location":"ref/download_languages/#Tesseract.download_languages","page":"Tesseract.download_languages","title":"Tesseract.download_languages","text":"download_languages(\n    languages::AbstractString = \"eng\";\n    target::AbstractString = \"tessdata\",\n    baseUrl::AbstractString = DATA_URL,\n    force::Bool = false\n)::Bool\n\nDownload the data files for the specified languages.  Returns false if there is a problem downloading the files.\n\nArguments:\n\nT Name Default Description\nO languages eng The languages to download separated with \"+\".\nK target tessdata The directory to save the data files in.\nK baseUrl ... The base URL to download the files from.\nK force false Should the files be downloaded even if they exist?\n\nDetails:\n\nBy default the data files are saved in a \"tessdata\" directory under the current directory, and the files are downloaded from https://github.com/tesseract-ocr/tessdata_best.\n\nNormally if the file has already been downloaded then it is not downloaded again.  However if force is true then the file is downloaded and the existing file is overwritten.\n\nSee also: update_languages\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_read_jpeg/","page":"Tesseract.pix_read_jpeg","title":"Tesseract.pix_read_jpeg","text":"pix_read_jpeg","category":"page"},{"location":"ref/pix_read_jpeg/#Tesseract.pix_read_jpeg","page":"Tesseract.pix_read_jpeg","title":"Tesseract.pix_read_jpeg","text":"pix_read_jpeg(\n    filename::AbstractString;\n    cmap::Bool = false,\n    reduction::Integer = Int32(1),\n    luminance::Bool = false,\n    ignoreErrors::Bool = false\n)::Union{Pix, Nothing}\n\nRead a JPEG image from the specified file.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the JPEG file to load.\nO cmap false Load the image as color mapped.\nO reduction Int32(1) Load a reduced resolution image.\nO luminance false Only load the luminace data from the image.\nO ignoreErrors false Ignore errors in the file.\n\nRestrictions:\n\ncmap - Requires that SPP be 3 or 4 in the image, so not all JPEG images can be loaded as          color mapped.\nreduction - Must be 1, 2, 4, or 8.\n\nDetails:\n\nThe reduction parameter can be used to load the image faster but at a reduced resolution.  The JPEG specifification allows the reader to recover from bit errors. Setting ignoreErrors to true will allow files with bit errors to be loaded but the image may not be correct.\n\n\n\n\n\npix_read_jpeg(\n    stream::IO;\n    cmap::Bool = false,\n    reduction::Integer = Int32(1),\n    luminance::Bool = false,\n    ignoreErrors::Bool = false\n)::Union{Pix, Nothing}\n\nRead a JPEG image from the specified stream.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR stream  The IO stream to read the JPEG file from.\nO cmap false Load the image as color mapped.\nO reduction Int32(1) Load a reduced resolution image.\nO luminance false Only load the luminace data from the image.\nO ignoreErrors false Ignore errors in the file.\n\nRestrictions:\n\ncmap - Requires that SPP be 3 or 4 in the image, so not all JPEG images can be loaded as          color mapped.\nreduction - Must be 1, 2, 4, or 8.\n\nDetails:\n\nThis implementation mirrors the API provided by Leptonica when you pass in a FILE pointer. This assumes that the remainder of the stream contains a JPEG image.\n\nThe reduction parameter can be used to load the image faster but at a reduced resolution.  The JPEG specifification allows the reader to recover from bit errors. Setting ignoreErrors to true will allow files with bit errors to be loaded but the image may not be correct.\n\n\n\n\n\npix_read_jpeg(\n    data::AbstractArray{UInt8};\n    cmap::Bool = false,\n    reduction::Integer = Int32(1),\n    luminance::Bool = false,\n    ignoreErrors::Bool = false\n)::Union{Pix, Nothing}\n\nRead a JPEG image from the byte array.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR data  The byte array to read the JPEG image from.\nO cmap false Load the image as color mapped.\nO reduction Int32(1) Load a reduced resolution image.\nO luminance false Only load the luminace data from the image.\nO ignoreErrors false Ignore errors in the file.\n\nRestrictions:\n\ncmap - Requires that SPP be 3 or 4 in the image, so not all JPEG images can be loaded as          color mapped.\nreduction - Must be 1, 2, 4, or 8.\n\nDetails:\n\nThe reduction parameter can be used to load the image faster but at a reduced resolution.  The JPEG specifification allows the reader to recover from bit errors. Setting ignoreErrors to true will allow files with bit errors to be loaded but the image may not be correct.\n\n\n\n\n\n","category":"function"},{"location":"#Tesseract.jl-documentation","page":"Tesseract.jl documentation","title":"Tesseract.jl documentation","text":"","category":"section"},{"location":"","page":"Tesseract.jl documentation","title":"Tesseract.jl documentation","text":"using Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\n# Download the Tesseract English data files\ndownload_languages(\"eng\")\n\n# Initialize the library to generate a text file.\ninstance = TessInst(\"eng\")\npipeline = TessPipeline(instance)\n\ntess_pipeline_text(pipeline, \"My Book.txt\")\n\n# Process all the pages in the book.\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\n# The results will be saved in \"My Book.txt\".\nprintln(\"My Book.txt: $(filesize(\"My Book.txt\")) bytes.\")\n\n# output\n\nMy Book.txt: 4436 bytes.","category":"page"},{"location":"","page":"Tesseract.jl documentation","title":"Tesseract.jl documentation","text":"This Julia packages provides support for performing OCR on scanned images.  This is done by using the Tesseract C library.  Tesseract.jl tries to provide a direct mapping of the Tesseract API to Julia with additional functionality added to fit better into the Julia ecosystem.","category":"page"},{"location":"ref/git_hub_project/","page":"Tesseract.DataFiles.GitHubProject","title":"Tesseract.DataFiles.GitHubProject","text":"GitHubProject","category":"page"},{"location":"ref/git_hub_project/#Tesseract.DataFiles.GitHubProject","page":"Tesseract.DataFiles.GitHubProject","title":"Tesseract.DataFiles.GitHubProject","text":"struct GitHubProject\n    owner::String\n    package::String\n    branch::String\n    basedir::String\nend\n\nThis structure holds details about a GitHub project we will be downloading information from.\n\nValues:\n\nName Description\nowner The owner of the project.\npackage The package to look in.\nbranch The branch to use.\nbasedir The directory in the package to look for the files in.\n\n\n\n\n\n","category":"type"},{"location":"ref/tess_tsv/","page":"Tesseract.tess_tsv","title":"Tesseract.tess_tsv","text":"tess_tsv","category":"page"},{"location":"ref/tess_tsv/#Tesseract.tess_tsv","page":"Tesseract.tess_tsv","title":"Tesseract.tess_tsv","text":"tess_tsv(\n    inst::TessInst,\n    page::Integer = Int32(1)\n)::Union{String, Nothing}\n\nRetrieve the TSV results from an recognition as a string with tabbed separated values.\n\nArguments:\n\nT Name Default Description\nR inst  The Tesseract instance to call.\nO page Int32(1) The page to get the data for.\n\nDetails:\n\nThis method will call tess_recognize() if it has not been called yet for the image.\n\nIf you want to read the data take a look at tess_parsed_tsv() which parses it into a form that is easier to use.  If you just want to display the data to the user or write it to a file then this method will probably be fine.\n\nThis call basically returns the results of the recognition process.  Each line in the string identifies an \"object\" found by Tesseract.  The 12 values per line are as follows:\n\nlevel - Identifies what the line describes.\npage - This is the page number passed into the tess_tsv() method.\nblock - Identifies the block on the page.\nparagraph - The paragraph number in the block.\nline - The line in the paragraph.\nword - The word in the line.\nleft - Left edge of the item in pixels.\ntop - Top edge of the item in pixels.\nwidth - Width of the item in pixels.\nheight - Height of the item in pixels.\nconf - How confident the OCR engine is of the word (0 - 100). -1 if level is not 5.\ntext - The word that was decoded from the image.\n\nLevel identifies what information the line is providing:\n\n1 - Page information, added at the start of the page.\n2 - Block information, added at the start of a block.\n3 - Paragraph information, added at the start of a paragraph.\n4 - Line information, added at the start of a line.\n5 - Word information, identifies a word that was read from the page.\n\nThe left, top, width, and height values define a box in pixels that encompases the item.  So if the level is 1, the box describes the whole image.  If the level is 1, then the box encloses the block that was extracted, and so on down to the word that was extracted.\n\nExample:\n\nusing Tesseract\n\ndownload_languages()\n\ninstance = TessInst()\npix = sample_pix()\n\ntess_image(instance, pix)\ntess_resolution(instance, 72)\n\ntsv = tess_tsv(instance)\n\nfor line in split(tsv, '\\n'; keepempty = false)[2:6]\n    println(strip(line))\nend\n\n# output\n\n2\t1\t1\t0\t0\t0\t10\t9\t479\t514\t-1\n3\t1\t1\t1\t0\t0\t11\t9\t406\t14\t-1\n4\t1\t1\t1\t1\t0\t11\t9\t406\t14\t-1\n5\t1\t1\t1\t1\t1\t11\t9\t14\t11\t95.791931\tNo\n5\t1\t1\t1\t1\t2\t35\t12\t22\t8\t95.791931\tone\n\nSee also: tess_tsv, tess_hocr, tess_alto, tess_parsed_tsv, tess_confidences\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_unlv/","page":"Tesseract.tess_unlv","title":"Tesseract.tess_unlv","text":"tess_unlv","category":"page"},{"location":"ref/tess_unlv/#Tesseract.tess_unlv","page":"Tesseract.tess_unlv","title":"Tesseract.tess_unlv","text":"tess_unlv(\n    inst::TessInst\n)::Union{String, Nothing}\n\nExtract the text in UNLV format UTF-8 with reject and suspect codes.  If there is an error nothing is returned.\n\nArguments:\n\nT Name Default Description\nR inst  The Tesseract instance to call.\n\nDetails:\n\nThis method will call tess_recognize() if it has not been called yet for the image.\n\nThis method is more used to test the OCR results than anything else.  If you want the original Latin1 encoding use tess_unlv_latin1 method.\n\nExample:\n\nusing Tesseract\n\ndownload_languages()\n\ninstance = TessInst()\npix = sample_pix()\n\ntess_image(instance, pix)\ntess_resolution(instance, 72)\n\nunlv = tess_unlv(instance)\n\nfor line in split(unlv, '\\n'; keepempty = false)[1:5]\n    println(line)\nend\n\n# output\n\nNo one would have believed in the last years of the\nthe nineteenth century that this world was being watched\nwatched keenly and closely by intelligences greater than\nthan man's and yet as mortal as his own; that as men busied\nbusied themselves about their various concerns they were\n\nSee also: tess_lstm_box, tess_word_box, tess_text_box,           tess_unlv_latin1\n\n\n\n\n\n","category":"function"},{"location":"ref/sample_tiff/","page":"Tesseract.sample_tiff","title":"Tesseract.sample_tiff","text":"sample_tiff","category":"page"},{"location":"ref/sample_tiff/#Tesseract.sample_tiff","page":"Tesseract.sample_tiff","title":"Tesseract.sample_tiff","text":"sample_tiff()::Vector{UInt8}\n\nGenerate a byte array containing a TIFF image with text.\n\nDetails:\n\nThe primary purpose of this method is to make it easier to demonstrate the functionality of the Tesseract library by providing a byte stream of an image with text that can be processed by Tesseract.\n\nThe text on this image is the first paragraph of the book War of World by H.G. Wells. This book is in the public domain, so no copyright exists.\n\nExample:\n\njulia> using Tesseract\n\njulia> data = sample_tiff();\n\njulia> pix = pix_read_tiff(data)\nImage (500, 600) at 32ppi\n\nSee also: sample_pix\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_params_parsed/","page":"Tesseract.tess_params_parsed","title":"Tesseract.tess_params_parsed","text":"tess_params_parsed","category":"page"},{"location":"ref/tess_params_parsed/#Tesseract.tess_params_parsed","page":"Tesseract.tess_params_parsed","title":"Tesseract.tess_params_parsed","text":"tess_params_parsed(\n        inst::TessInst\n    )::Vector{TessParam}\n\nRetrieved all the Tesseract parameters with their valuse as an array of TessParam objects.\n\nArguments:\n\nT Name Default Description\nR inst  The Tesseract instance to get the parameters from.\n\nDetails:\n\nParses the result of [tess_params`](@ref) into something more easily digested by a computer.  Each line of text is split into 3 values:\n\nThe name of the parameter.\nThe default value of the parameter (may be an empty string).\nText describing the parameter.\n\nEach value is separated by a tab and the description is terminated by a new line.\n\nSee also: TessParam, tess_params, tess_get_param,           tess_set_param\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_read_config/","page":"Tesseract.tess_read_config","title":"Tesseract.tess_read_config","text":"tess_read_config","category":"page"},{"location":"ref/tess_read_config/#Tesseract.tess_read_config","page":"Tesseract.tess_read_config","title":"Tesseract.tess_read_config","text":"tess_read_config(\n    inst::TessInst,\n    filename::AbstractString\n)::Nothing\n\nLoad configuration settings from a file into the Tesseract instance.\n\nArguments:\n\nT Name Default Description\nR inst  The Tesseract instance to load the settings into.\nR filename  The name of the file to load the settings from.\n\nSee also: tess_read_debug_config\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_write_implied_format/","page":"Tesseract.pix_write_implied_format","title":"Tesseract.pix_write_implied_format","text":"pix_write_implied_format","category":"page"},{"location":"ref/pix_write_implied_format/#Tesseract.pix_write_implied_format","page":"Tesseract.pix_write_implied_format","title":"Tesseract.pix_write_implied_format","text":"pix_write_implied_format(\n    filename::AbstractString,     # The name of the file to write to.\n    pix::Pix;                     # The image to write.\n    quality::Integer  = Int32(75), # If the image is JPEG the quality to encode as.\n    progressive::Bool = false     # If the image is JEPG use progressive encoding?\n)::Bool\n\nWrite the image to a file based on the file extension.  The quality and progressive parameters are only used if the image type is JPEG.  Returns true on success or false on failure.\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_pipeline_unlv_latin1/","page":"Tesseract.tess_pipeline_unlv_latin1","title":"Tesseract.tess_pipeline_unlv_latin1","text":"tess_pipeline_unlv_latin1","category":"page"},{"location":"ref/tess_pipeline_unlv_latin1/#Tesseract.tess_pipeline_unlv_latin1","page":"Tesseract.tess_pipeline_unlv_latin1","title":"Tesseract.tess_pipeline_unlv_latin1","text":"tess_pipeline_unlv_latin1(\n    pipe::TessPipeline\n)::Union{TessOutput{Vector{UInt8}}, Nothing}\n\nGenerate an UNLV file from the pipeline and save it to a byte array.  Returns nothing if there is a problem adding the UNLV generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the UNLV text from.\n\nDetails:\n\nThe returned bytes will be in Latin-1 encoding, so a conversion would be required before using the bytes as a string in Julia.  tess_pipeline_unlv will provide you with the same data but already encoded in UTF-8 for Julia.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\nbytes = tess_pipeline_unlv_latin1(pipeline)\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\nprintln(string(\"Book generated: \", length(bytes[]), \" bytes.\"))\n\n# output\n\nBook generated: 4410 bytes.\n\nSee also: tess_run_pipeline, tess_pipeline_word_box,           tess_pipeline_lstm_box, tess_pipeline_unlv\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_write_pam/","page":"Tesseract.pix_write_pam","title":"Tesseract.pix_write_pam","text":"pix_write_pam","category":"page"},{"location":"ref/pix_write_pam/#Tesseract.pix_write_pam","page":"Tesseract.pix_write_pam","title":"Tesseract.pix_write_pam","text":"pix_write_pam(\n    filename::AbstractString,\n    pix::Pix\n)::Bool\n\nWrite an image to a file in the PAM image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the file to write to.\nR pix  The image to write to the file.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\n\n\n\n\npix_write_pam(\n    stream::IO,\n    pix::Pix\n)::Bool\n\nWrite an image to an IO stream in the PAM image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR stream  The IO stream to write the image to.\nR pix  The image to write to the stream.\n\n\n\n\n\npix_write_pam(\n    pix::Pix\n)::Union{Vector{UInt8}, Nothing}\n\nWrite an image to a byte array in the PAM image format.  If there is an error nothing is returned.\n\nArguments:\n\nT Name Default Description\nR pix  The image to write to the byte array.\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_get_dimensions/","page":"Tesseract.pix_get_dimensions","title":"Tesseract.pix_get_dimensions","text":"pix_get_dimensions","category":"page"},{"location":"ref/pix_get_dimensions/#Tesseract.pix_get_dimensions","page":"Tesseract.pix_get_dimensions","title":"Tesseract.pix_get_dimensions","text":"pix_get_dimensions(\n    pix::Pix\n)::Union{NamedTuple{(:w, :h, :d), Tuple{Int32, Int32, Int32}}, Nothing}\n\nRetrieve the dimensions of the image.\n\nArguments:\n\nT Name Default Description\nR pix  The image to get the dimensions of.\n\nDetails:\n\nThis method returns a named tuple:\n\nw - Image width.\nh - Image height.\nd - Color depth.\n\nSee also: pix_get_depth\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_text_box/","page":"Tesseract.tess_text_box","title":"Tesseract.tess_text_box","text":"tess_text_box","category":"page"},{"location":"ref/tess_text_box/#Tesseract.tess_text_box","page":"Tesseract.tess_text_box","title":"Tesseract.tess_text_box","text":"tess_text_box(\n    inst::TessInst,\n    page::Integer = Int32(1)\n)::Union{String, Nothing}\n\nRetrieve the boxes for the identified characters on the page.  If there is an error 'nothing' is returned.\n\nArguments:\n\nT Name Default Description\nR inst  The Tesseract instance to call.\nO page Int32(1) The page to get the data for.\n\nDetails:\n\nThis method will call tess_recognize() if it has not been called yet for the image.  The results are primarly useful for training purposes.\n\nEach line in the result is a character identified with 6 values:\n\nThe character that was recognized.\nThe left edge of the character measured in pixels from the left edge.\nThe bottom edge of the character measured in pixels from the bottom of the image.\nThe right edge of the character measured in pixels from the left edge.\nThe top edge of the character measured in pixels from the bottom of the image.\nThe page used in the recogniztion 0 based.\n\nExample:\n\nusing Tesseract\n\ndownload_languages()\n\ninstance = TessInst()\npix = sample_pix()\n\ntess_image(instance, pix)\ntess_resolution(instance, 72)\n\nbox = tess_text_box(instance)\n\nfor line in split(box, '\\n'; keepempty = false)[1:5]\n  println(line)\nend\n\n# output\n\nN 11 580 17 591 0\no 19 580 25 588 0\no 35 580 41 588 0\nn 43 580 49 588 0\ne 51 580 57 588 0\n\nSee also: tess_unlv, tess_lstm_box, tess_word_box\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_write_pdf/","page":"Tesseract.pix_write_pdf","title":"Tesseract.pix_write_pdf","text":"pix_write_pdf","category":"page"},{"location":"ref/pix_write_pdf/#Tesseract.pix_write_pdf","page":"Tesseract.pix_write_pdf","title":"Tesseract.pix_write_pdf","text":"pix_write_pdf(\n    filename::AbstractString,\n    pix::Pix;\n    ppi::Integer = Int32(300),\n    title::AbstractString = \"\"\n)::Bool\n\nWrite an image to a file as a PDF.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the file to write to.\nR pix  The image to write to the file.\nO ppi Int32(300) The resolution of the image to use in pixels per inch.\nO title  The title to use in the PDF.\n\nRestrictions:\n\nppi - Must be greater than 0.\ntitle - An empty string will result in no title being used in the PDF.\n\nDetails:\n\nIf the file exists it will be overwritten.  By default no title is added.\n\n\n\n\n\npix_write_pdf(\n    stream::IO,\n    pix::Pix;\n    ppi::Integer = Int32(300),\n    title::AbstractString = \"\"\n)::Bool\n\nWrite an image to an IO stream as a PDF.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR stream  The stream to write the PDF to.\nR pix  The image to write to the PDF.\nO ppi Int32(300) The resolution of the image to use in pixels per inch.\nO title  The title to use in the PDF.\n\nRestrictions:\n\nppi - Must be greater than 0.\ntitle - An empty string will result in no title being used in the PDF.\n\nDetails:\n\nIf the file exists it will be overwritten.  By default no title is added.\n\n\n\n\n\npix_write_pdf(\n    pix::Pix;\n    ppi::Integer = Int32(300),\n    title::AbstractString = \"\"\n)::Union{Vector{UInt8}, Nothing}\n\nWrite an image to a byte array as a PDF.  If there is an error nothing is returned.\n\nArguments:\n\nT Name Default Description\nR pix  The image to write to the PDF.\nO ppi Int32(300) The resolution of the image to use in pixels per inch.\nO title  The title to use in the PDF.\n\nRestrictions:\n\nppi - Must be greater than 0.\ntitle - An empty string will result in no title being used in the PDF.\n\nDetails:\n\nBy default no title is added.\n\n\n\n\n\n","category":"function"},{"location":"ref/download_pdf_font/","page":"Tesseract.download_pdf_font","title":"Tesseract.download_pdf_font","text":"download_pdf_font","category":"page"},{"location":"ref/download_pdf_font/#Tesseract.download_pdf_font","page":"Tesseract.download_pdf_font","title":"Tesseract.download_pdf_font","text":"download_pdf_font(;\n    target::AbstractString = \"tessdata\"\n    baseUrl::AbstractString = PDF_FONT_URL,\n    force::Bool = false\n)::Bool\n\nDownload the PDF font file.  Returns false if there is a problem downloading the files.\n\nArguments:\n\nT Name Default Description\nK target tessdata The directory to save the PDF font to.\nK baseUrl ... The base URL to download the file from.\nK force false Should the file be downloaded even it it exists?\n\nDetails:\n\nBy default \"pdf.ttf\" is downloaded from https://github.com/tesseract-ocr/tessconfigs. The client can specify a different URL to download the file from.  This file is needed when asking Tesseract to generate a PDF.\n\nNormally if the file has already been downloaded then it is not downloaded again.  However if force is true then the file is downloaded and the existing file is overwritten.\n\nSee also: update_pdf_font\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_write_pnm/","page":"Tesseract.pix_write_pnm","title":"Tesseract.pix_write_pnm","text":"pix_write_pnm","category":"page"},{"location":"ref/pix_write_pnm/#Tesseract.pix_write_pnm","page":"Tesseract.pix_write_pnm","title":"Tesseract.pix_write_pnm","text":"pix_write_pnm(\n    filename::AbstractString,\n    pix::Pix\n)::Bool\n\nWrite an image to a file in the PNM image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the file to write to.\nR pix  The image to write to the file.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\n\n\n\n\npix_write_pnm(\n    stream::IO,\n    pix::Pix\n)::Bool\n\nWrite an image to an IO stream in the PNM image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR stream  The IO stream to write the image to.\nR pix  The image to write to the IO stream.\n\n\n\n\n\npix_write_pnm(\n    pix::Pix\n)::Union{Vector{UInt8}, Nothing}\n\nWrite an image to a byte array in the PNM image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR pix  The image to write to a byte array.\n\n\n\n\n\n","category":"function"},{"location":"ref/sample_pix/","page":"Tesseract.sample_pix","title":"Tesseract.sample_pix","text":"sample_pix","category":"page"},{"location":"ref/sample_pix/#Tesseract.sample_pix","page":"Tesseract.sample_pix","title":"Tesseract.sample_pix","text":"sample_pix()::Pix\n\nGenerate a sample image with text.\n\nDetails:\n\nThe primary purpose of this method is to make it easier to demonstrate the functionality of the Tesseract library by providing a Pix object for an image with text that can be processed by Tesseract.\n\nThe text on this image is the first paragraph of the book War of World by H.G. Wells. This book is in the public domain, so no copyright exists.\n\nExample:\n\njulia> using Tesseract\n\njulia> update_languages()\ntrue\n\njulia> instance = TessInst()\nAllocated Tesseract instance.\n\njulia> pix = sample_pix()\nImage (500, 600) at 32ppi\n\njulia> tess_image(instance, pix)\n\njulia> tess_resolution(instance, 72)\n\njulia> text = tess_text(instance);\n\nSee also: sample_tiff\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_params/","page":"Tesseract.tess_params","title":"Tesseract.tess_params","text":"tess_params","category":"page"},{"location":"ref/tess_params/#Tesseract.tess_params","page":"Tesseract.tess_params","title":"Tesseract.tess_params","text":"tess_params(\n    inst::TessInst,\n    filename::AbstractString\n)::Bool\n\nPrint out all the parameters with their values and help text to the specified file. Returns false if there was an error.\n\nArguments:\n\nT Name Default Description\nR inst  The Tesseract instance to get get the parameters from.\nR filename  The filename to write to.\n\nDetails:\n\nFor each parameter this method prints out it's name, it's value, and some descriptive text about the variable.  Each variable is on it's own line with a tab character seperating each value.\n\nSee also: tess_params_parsed, tess_get_param, tess_set_param\n\n\n\n\n\ntess_params(\n    inst::TessInst,\n    stream::IO\n)::Bool\n\nPrint out all the parameters with their values and help text to the specified stream. Returns false if there was an error.\n\nArguments:\n\nT Name Default Description\nR inst  The Tesseract instance to get get the parameters from.\nR stream  The stream to write the files to.\n\nDetails:\n\nFor each parameter this method prints out it's name, it's value, and some descriptive text about the variable.  Each variable is on it's own line with a tab character seperating each value.\n\nSee also: tess_params_parsed, tess_get_param, tess_set_param\n\n\n\n\n\ntess_params(\n    inst::TessInst\n)::Union{String, Nothing}\n\nPrint out all the parameters with their values and help text to a string.  Returns nothing if there was an error.\n\nArguments:\n\nT Name Default Description\nR inst  The Tesseract instance to get the parameters from.\n\nDetails:\n\nThe return string will contain multiple lines, each line contains the name of a variable, it's value, and some descriptive text about the variable.  The fields are separated by tabs.\n\nSee also: tess_params_parsed, tess_get_param, tess_set_param\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_write_webp/","page":"Tesseract.pix_write_webp","title":"Tesseract.pix_write_webp","text":"pix_write_webp","category":"page"},{"location":"ref/pix_write_webp/#Tesseract.pix_write_webp","page":"Tesseract.pix_write_webp","title":"Tesseract.pix_write_webp","text":"pix_write_webp(\n    filename::AbstractString,\n    pix::Pix;\n    quality::Integer = Int32(80),\n    lossless::Bool = true\n)::Bool\n\nWrite an image to a file in the WEBP image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nr filename  The name of the file to write to.\nR pix  The image to write to disk.\nO quality Int32(80) The quality to encode the image at.\nO lossless false Should the lossless algorithm be used?\n\nRestrictions:\n\nquality - Must be in the range 1 to 100.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\nIf lossless is set to true then the quality is ignored.\n\n\n\n\n\npix_write_webp(\n    stream::IO,\n    pix::Pix;\n    quality::Integer = Int32(80),\n    lossless::Bool = true\n)::Bool\n\nWrite an image to a stream in the WEBP image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR stream  The IO stream to write to.\nR pix  The image to write to the stream.\nO quality Int32(80) The quality to encode the image at.\nO lossless false Should the lossless algorithm be used?\n\nRestrictions:\n\nquality - Must be in the range 1 to 100.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\nIf lossless is set to true then the quality is ignored.\n\n\n\n\n\npix_write_webp(\n    pix::Pix;\n    quality::Integer = Int32(80),\n    lossless::Bool = true\n)::Union{Vector{UInt8}, Nothing}\n\nWrite an image to a byte array in the WEBP image format.  If there is an error nothing is returned.\n\nArguments:\n\nT Name Default Description\nR pix  The image to write to the stream.\nO quality Int32(80) The quality to encode the image at.\nO lossless false Should the lossless algorithm be used?\n\nRestrictions:\n\nquality - Must be in the range 1 to 100.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\nIf lossless is set to true then the quality is ignored.\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_delete/","page":"Tesseract.pix_delete","title":"Tesseract.pix_delete","text":"pix_delete!","category":"page"},{"location":"ref/pix_delete/#Tesseract.pix_delete!","page":"Tesseract.pix_delete","title":"Tesseract.pix_delete!","text":"pix_delete!(\n    pix::Pix\n)::Nothing\n\nRelease the Pix object so it can be freed.\n\nArguments:\n\nT Name Default Description\nR pix  The image to release.\n\nDetails:\n\nThis method is called automatically by the garbage collector but can be called manually to release the object early.  This method can be called multiple times without any negative effects.\n\nCalling this method will free the object unless a reference is held by an external library.  Once that library releases it's reference the Pix object should be fully freed.  However once pix_delete!() is called on an object passing the object to any other library call will result in an error.\n\nNote: This method is not thread safe.\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_loaded_languages/","page":"Tesseract.tess_loaded_languages","title":"Tesseract.tess_loaded_languages","text":"tess_loaded_languages","category":"page"},{"location":"ref/tess_loaded_languages/#Tesseract.tess_loaded_languages","page":"Tesseract.tess_loaded_languages","title":"Tesseract.tess_loaded_languages","text":"tess_loaded_languages(\n    inst::TessInst\n)::Union{Vector{String}, Nothing}\n\nGet the the list of languages loaded into the OCR engine.  Returns nothing if there was an error.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to get the languages from.\n\nDetails:\n\nThis method returns the language loaded into the Tesseract engine.  Some language files will load additional languages.  Unlike tess_initialized_languages() this method will return all the loaded languages not just the ones it was told to load by the client.\n\nExample:\n\njulia> using Tesseract\n\njulia> download_languages(\"eng+spa\")\ntrue\n\njulia> instance = TessInst(\"eng+spa\")\nAllocated Tesseract instance.\n\njulia> tess_loaded_languages(instance)\n2-element Vector{String}:\n \"eng\"\n \"spa\"\n\nSee also: tess_init\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_get_depth/","page":"Tesseract.pix_get_depth","title":"Tesseract.pix_get_depth","text":"pix_get_depth","category":"page"},{"location":"ref/pix_get_depth/#Tesseract.pix_get_depth","page":"Tesseract.pix_get_depth","title":"Tesseract.pix_get_depth","text":"pix_get_depth(\n    pix::Pix\n)::Int32\n\nRetrieves the color bit depth of the image.\n\nArguments:\n\nT Name Default Description\nR pix  The image to get the bit depth from.\n\nSee also: pix_get_dimensions\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_read_pnm/","page":"Tesseract.pix_read_pnm","title":"Tesseract.pix_read_pnm","text":"pix_read_pnm","category":"page"},{"location":"ref/pix_read_pnm/#Tesseract.pix_read_pnm","page":"Tesseract.pix_read_pnm","title":"Tesseract.pix_read_pnm","text":"pix_read_pnm(\n    filename::AbstractString\n)::Union{Pix, Nothing}\n\nRead a PNG image from the specified file.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the PNM file to load.\n\n\n\n\n\npix_read_pnm(\n    stream::IO\n)::Union{Pix, Nothing}\n\nRead a PNM image from the specified stream.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR stream  The IO stream to read the PNM file from.\n\nDetails:\n\nThis implementation mirrors the API provided by Leptonica when you pass in a FILE pointer. This assumes that the remainder of the stream contains a PNM image.\n\n\n\n\n\npix_read_pnm(\n    data::AbstractArray{UInt8}\n)::Union{Pix, Nothing}\n\nRead a PNM image from the byte array.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR data  The byte array to read the PNM image from.\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_word_box/","page":"Tesseract.tess_word_box","title":"Tesseract.tess_word_box","text":"tess_word_box","category":"page"},{"location":"ref/tess_word_box/#Tesseract.tess_word_box","page":"Tesseract.tess_word_box","title":"Tesseract.tess_word_box","text":"tess_word_box(\n    inst::TessInst,\n    page::Integer = Int32(1)\n)::Union{String, Nothing}\n\nCreate a UTF8 box file with WordStr strings,  If there is an error 'nothing' is returned.\n\nArguments:\n\nT Name Default Description\nR inst  The Tesseract instance to call.\nO page Int32(1) The page to get the data for.\n\nDetails:\n\nThis method will call tess_recognize() if it has not been called yet for the image.  The results are probably used for training.\n\nExample:\n\nusing Tesseract\n\ndownload_languages()\n\ninstance = TessInst()\npix = sample_pix()\n\ntess_image(instance, pix)\ntess_resolution(instance, 72)\n\nbox = tess_word_box(instance)\n\nfor line in split(box, '\\n'; keepempty = false)[1:5]\n    println(line)\nend\n\n# output\n\nWordStr 11 577 417 591 0 #No one would have believed in the last years of the\n    418 577 422 591 0\nWordStr 11 557 457 571 0 #the nineteenth century that this world was being watched\n    458 557 462 571 0\nWordStr 10 537 457 551 0 #watched keenly and closely by intelligences greater than\n\nSee also: tess_unlv, tess_lstm_box, tess_text_box\n\n\n\n\n\n","category":"function"},{"location":"ref/update_languages/","page":"Tesseract.update_languages","title":"Tesseract.update_languages","text":"update_languages","category":"page"},{"location":"ref/update_languages/#Tesseract.update_languages","page":"Tesseract.update_languages","title":"Tesseract.update_languages","text":"update_languages(\n    languages::AbstractString = \"eng\";\n    target::AbstractString = \"tessdata\",\n    frequency::Integer = 7,\n    source::GitHubProject = DATA_REPO\n)::Bool\n\nUpdate the training data files for the specified languages.  Returns false if there was an error updating the files.\n\nArguments:\n\nT Name Default Description\nO languages eng The languages to update separated with \"+\".\nK target tessdata The directory to save the data files in.\nK frequency 7 How often to check for updates on the server in days.\nK source ... The GitHub project to download the training data from.\n\nDetails:\n\nBy default the data files are saved in a \"tessdata\" directory under the current directory. The training data is normally downloaded from the https://github.com/tesseract-ocr/tessdata_best GitHub project.\n\nSee also: download_languages\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_set_debug_param/","page":"-","title":"-","text":"tess_set_debug_param","category":"page"},{"location":"ref/tess_set_debug_param/#Tesseract.tess_set_debug_param","page":"-","title":"Tesseract.tess_set_debug_param","text":"tess_set_debug_param(\n    inst::TessInst,\n    name::AbstractString,\n    value::Integer\n)::Bool\n\nSets an debug integer variable in th Tesseract engine.  Returns false if the parameter was not found.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to set the variable in\nR name  The name of the variable to set.\nR value  The value to set.\n\nDetails:\n\nIf the parameter is not a debug setting then the value will not be changed.\n\nExamples:\n\njulia> using Tesseract\n\njulia> download_languages()\ntrue\n\njulia> instance = TessInst()\nAllocated Tesseract instance.\n\njulia> tess_set_debug_param(instance, \"classify_learning_debug_level\", 0)\ntrue\n\nSee also: tess_params, tess_params_parsed, tess_get_param\n\n\n\n\n\ntess_set_debug_param(\n    inst::TessInst,\n    name::AbstractString,\n    value::Bool\n)::Bool\n\nSets a debug boolean variable in th Tesseract engine.  Returns false if the parameter was not found.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to set the variable in\nR name  The name of the variable to set.\nR value  The value to set.\n\nDetails:\n\nIf the parameter is not a debug setting then the value will not be changed.\n\nExamples:\n\njulia> using Tesseract\n\njulia> download_languages()\ntrue\n\njulia> instance = TessInst()\nAllocated Tesseract instance.\n\njulia> tess_set_debug_param(instance, \"textord_debug_tabfind\", false)\ntrue\n\nSee also: tess_params, tess_params_parsed, tess_get_param\n\n\n\n\n\ntess_set_debug_param(\n    inst::TessInst,\n    name::AbstractString,\n    value::Float64\n)::Bool\n\nSets a debug Float64 variable in th Tesseract engine.  Returns false if the parameter was not found.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to set the variable in\nR name  The name of the variable to set.\nR value  The value to set.\n\nDetails:\n\nThis method is implmented for future enchancements.  Currently there are no tesseract debug parameters.\n\nSee also: tess_params, tess_params_parsed, tess_get_param\n\n\n\n\n\ntess_set_debug_param(\n    inst::TessInst,\n    name::AbstractString,\n    value::AbstractString\n)::Bool\n\nSets a debug string variable in th Tesseract engine.  Returns false if the parameter was not found.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to set the variable in\nR name  The name of the variable to set.\nR value  The value to set.\n\nDetails:\n\nIf the parameter is not a debug setting then the value will not be changed.\n\nExamples:\n\njulia> using Tesseract\n\njulia> download_languages()\ntrue\n\njulia> instance = TessInst()\nAllocated Tesseract instance.\n\njulia> tess_set_debug_param(instance, \"debug_file\", \"debug.log\")\ntrue\n\nSee also: tess_params, tess_params_parsed, tess_get_param\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_set_param/","page":"Tesseract.tess_set_param","title":"Tesseract.tess_set_param","text":"tess_set_param","category":"page"},{"location":"ref/tess_set_param/#Tesseract.tess_set_param","page":"Tesseract.tess_set_param","title":"Tesseract.tess_set_param","text":"tess_set_param(\n    inst::TessInst,\n    name::AbstractString,\n    value::Integer\n)::Bool\n\nSets an integer variable in th Tesseract engine.  Returns false if the parameter was not found.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to set the variable in\nR name  The name of the variable to set.\nR value  The value to set.\n\nExamples:\n\njulia> using Tesseract\n\njulia> download_languages()\ntrue\n\njulia> instance = TessInst()\nAllocated Tesseract instance.\n\njulia> tess_set_param(instance, \"edges_min_nonhole\", 12)\ntrue\n\nSee also: tess_params, tess_params_parsed, tess_get_param\n\n\n\n\n\ntess_set_param(\n    inst::TessInst,\n    name::AbstractString,\n    value::Bool\n)::Bool\n\nSets a boolean variable in th Tesseract engine.  Returns false if the parameter was not found.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to set the variable in\nR name  The name of the variable to set.\nR value  The value to set.\n\nExamples:\n\njulia> using Tesseract\n\njulia> download_languages()\ntrue\n\njulia> instance = TessInst()\nAllocated Tesseract instance.\n\njulia> tess_set_param(instance, \"edges_debug\", false)\ntrue\n\nSee also: tess_params, tess_params_parsed, tess_get_param\n\n\n\n\n\ntess_set_param(\n    inst::TessInst,\n    name::AbstractString,\n    value::Float64\n)::Bool\n\nSets a Float64 variable in th Tesseract engine.  Returns false if the parameter was not found.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to set the variable in\nR name  The name of the variable to set.\nR value  The value to set.\n\nExamples:\n\njulia> using Tesseract\n\njulia> download_languages()\ntrue\n\njulia> instance = TessInst()\nAllocated Tesseract instance.\n\njulia> tess_set_param(instance, \"classify_min_slope\", 0.414214)\ntrue\n\nSee also: tess_params, tess_params_parsed, tess_get_param\n\n\n\n\n\ntess_set_param(\n    inst::TessInst,\n    name::AbstractString,\n    value::AbstractString\n)::Bool\n\nSets a string variable in th Tesseract engine.  Returns false if the parameter was not found.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to set the variable in\nR name  The name of the variable to set.\nR value  The value to set.\n\nExamples:\n\njulia> using Tesseract\n\njulia> download_languages()\ntrue\n\njulia> instance = TessInst()\nAllocated Tesseract instance.\n\njulia> tess_set_param(instance, \"page_separator\", \"\\f\")\ntrue\n\nSee also: tess_params, tess_params_parsed, tess_get_param\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_output/","page":"Tesseract.TessOutput","title":"Tesseract.TessOutput","text":"TessOutput","category":"page"},{"location":"ref/tess_output/#Tesseract.TessOutput","page":"Tesseract.TessOutput","title":"Tesseract.TessOutput","text":"mutable struct TessOutput{T}\n    result::Union{T, Nothing}\nend\n\nOutput object returned when adding an output renderer to a pipeline.  This object usually holds nothing until the tess_run_pipeline method completes.\n\nSee slso: tess_pipeline_text\n\n\n\n\n\n","category":"type"},{"location":"ref/pix_read_webp/","page":"Tesseract.pix_read_webp","title":"Tesseract.pix_read_webp","text":"pix_read_webp","category":"page"},{"location":"ref/pix_read_webp/#Tesseract.pix_read_webp","page":"Tesseract.pix_read_webp","title":"Tesseract.pix_read_webp","text":"pix_read_webp(\n    filename::AbstractString\n)::Union{Pix, Nothing}\n\nRead a WEBP image from the specified file.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the WEBP file to load.\n\n\n\n\n\npix_read_webp(\n    stream::IO\n)::Union{Pix, Nothing}\n\nRead a WEBP image from the specified stream.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR stream  The IO stream to read the WEBP file from.\n\nDetails:\n\nThis implementation mirrors the API provided by Leptonica when you pass in a FILE pointer. This assumes that the remainder of the stream contains a WEBP image.\n\n\n\n\n\npix_read_webp(\n    data::AbstractArray{UInt8}\n)::Union{Pix, Nothing}\n\nRead a WEBP image from the byte array.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR data  The byte array to read the WEBP image from.\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_hocr/","page":"Tesseract.tess_hocr","title":"Tesseract.tess_hocr","text":"tess_hocr","category":"page"},{"location":"ref/tess_hocr/#Tesseract.tess_hocr","page":"Tesseract.tess_hocr","title":"Tesseract.tess_hocr","text":"tess_hocr(\n    inst::TessInst,\n    page::Integer = Int32(1)\n)::Union{String, Nothing}\n\nExtract the text in hOCR format from the image.  Returns nothing if there is an error.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to grab the text from.\nO page Int32(1) The page to extract the hOCR text for.\n\nDetails:\n\nThis method will call tess_recognize() if it has not been called yet for the image.  The current hOCR spec can be accessed at http://kba.cloud/hocr-spec/1.2/.\n\nExample:\n\nusing Tesseract\n\ndownload_languages()\n\ninstance = TessInst()\npix = sample_pix()\n\ntess_image(instance, pix)\ntess_resolution(instance, 72)\n\nhocr = tess_hocr(instance)\n\nfor line in split(hocr, '\\n'; keepempty = false)[1:5]\n    println(strip(line))\nend\n\n# output\n\n<div class='ocr_page' id='page_1' title='image \"unknown\"; bbox 0 0 500 600; ppageno 0; scan_res 72 72'>\n<div class='ocr_carea' id='block_1_1' title=\"bbox 10 9 489 523\">\n<p class='ocr_par' id='par_1_1' lang='eng' title=\"bbox 11 9 417 23\">\n<span class='ocr_line' id='line_1_1' title=\"bbox 11 9 417 23; baseline 0 -3; x_size 22.717392; x_descenders 5.5; x_ascenders 5.7391305\">\n<span class='ocrx_word' id='word_1_1' title='bbox 11 9 25 20; x_wconf 95'>No</span>\n\nSee also: tess_text, tess_alto, tess_tsv,           tess_parsed_tsv, tess_confidences\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_pipeline_tsv/","page":"Tesseract.tess_pipeline_tsv","title":"Tesseract.tess_pipeline_tsv","text":"tess_pipeline_tsv","category":"page"},{"location":"ref/tess_pipeline_tsv/#Tesseract.tess_pipeline_tsv","page":"Tesseract.tess_pipeline_tsv","title":"Tesseract.tess_pipeline_tsv","text":"tess_pipeline_tsv(\n    pipe::TessPipeline,\n    filename::AbstractString\n)::Bool\n\nGenerate a tsv file from the pipeline and save it to the specified file.  Returns false if there is a problem adding the tsv generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the tsv from.\nR filename  The file to write the tsv to.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\ntess_pipeline_tsv(pipeline, \"My Book.tsv\")\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\nfor line in readlines(\"My Book.tsv\")[1:10]\n    println(line)\nend\n\n# output\n\nlevel\tpage_num\tblock_num\tpar_num\tline_num\tword_num\tleft\ttop\twidth\theight\tconf\ttext\n1\t1\t0\t0\t0\t0\t0\t0\t500\t600\t-1\n2\t1\t1\t0\t0\t0\t10\t9\t479\t514\t-1\n3\t1\t1\t1\t0\t0\t11\t9\t406\t14\t-1\n4\t1\t1\t1\t1\t0\t11\t9\t406\t14\t-1\n5\t1\t1\t1\t1\t1\t11\t9\t14\t11\t95.791931\tNo\n5\t1\t1\t1\t1\t2\t35\t12\t22\t8\t95.791931\tone\n5\t1\t1\t1\t1\t3\t66\t9\t39\t11\t92.953789\twould\n5\t1\t1\t1\t1\t4\t115\t9\t30\t11\t92.953789\thave\n5\t1\t1\t1\t1\t5\t155\t9\t62\t11\t96.819153\tbelieved\n\nSee also: tess_run_pipeline, tess_pipeline_alto,           tess_pipeline_hocr, tess_pipeline_pdf           tess_pipeline_text\n\n\n\n\n\ntess_pipeline_tsv(\n    pipe::TessPipeline\n)::Union{TessOutput{String}, Nothing}\n\nGenerate a TSV file from the pipeline and save it to a string.  Returns nothing if there is a problem adding the TSV generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the TSV data from.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\nbook = tess_pipeline_tsv(pipeline)\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\n    true\nend\n\nfor line in split(book[], \"\\n\")[1:10]\n    println(line)\nend\n\n# output\n\nlevel\tpage_num\tblock_num\tpar_num\tline_num\tword_num\tleft\ttop\twidth\theight\tconf\ttext\n1\t1\t0\t0\t0\t0\t0\t0\t500\t600\t-1\n2\t1\t1\t0\t0\t0\t10\t9\t479\t514\t-1\n3\t1\t1\t1\t0\t0\t11\t9\t406\t14\t-1\n4\t1\t1\t1\t1\t0\t11\t9\t406\t14\t-1\n5\t1\t1\t1\t1\t1\t11\t9\t14\t11\t95.791931\tNo\n5\t1\t1\t1\t1\t2\t35\t12\t22\t8\t95.791931\tone\n5\t1\t1\t1\t1\t3\t66\t9\t39\t11\t92.953789\twould\n5\t1\t1\t1\t1\t4\t115\t9\t30\t11\t92.953789\thave\n5\t1\t1\t1\t1\t5\t155\t9\t62\t11\t96.819153\tbelieved\n\nSee also: tess_run_pipeline, tess_pipeline_alto,           tess_pipeline_hocr, tess_pipeline_pdf           tess_pipeline_text\n\n\n\n\n\ntess_pipeline_tsv(\n    func::Function,\n    pipe::TessPipeline\n)::Bool\n\nGenerate a TSV file from the pipeline and pass it back to the client via a callback. Returns false if there is a problem adding the TSV generator to the output.\n\nArguments:\n\nT Name Default Description\nR func  The function to call with the lines of text.\nR pipe  The pipline to collect the TSV data from.\n\nDetails:\n\nThe text will be passed to the caller one line at a time. The \"\\n\" line terminator will be included with the text.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\ncount = 0\ntess_pipeline_tsv(pipeline) do line\n    global count\n    if count < 10\n        print(line)\n    end\n    count += 1\nend\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\n    true\nend\n\n# output\n\nlevel\tpage_num\tblock_num\tpar_num\tline_num\tword_num\tleft\ttop\twidth\theight\tconf\ttext\n1\t1\t0\t0\t0\t0\t0\t0\t500\t600\t-1\n2\t1\t1\t0\t0\t0\t10\t9\t479\t514\t-1\n3\t1\t1\t1\t0\t0\t11\t9\t406\t14\t-1\n4\t1\t1\t1\t1\t0\t11\t9\t406\t14\t-1\n5\t1\t1\t1\t1\t1\t11\t9\t14\t11\t95.791931\tNo\n5\t1\t1\t1\t1\t2\t35\t12\t22\t8\t95.791931\tone\n5\t1\t1\t1\t1\t3\t66\t9\t39\t11\t92.953789\twould\n5\t1\t1\t1\t1\t4\t115\t9\t30\t11\t92.953789\thave\n5\t1\t1\t1\t1\t5\t155\t9\t62\t11\t96.819153\tbelieved\ntrue\n\nSee also: tess_run_pipeline, tess_pipeline_alto,           tess_pipeline_hocr, tess_pipeline_pdf           tess_pipeline_text\n\n\n\n\n\n","category":"function"},{"location":"load/#Load-languages","page":"Load languages","title":"Load languages","text":"","category":"section"},{"location":"load/","page":"Load languages","title":"Load languages","text":"julia> using Tesseract\n\njulia> download_languages(\"eng+spa+fra\")\ntrue\n\njulia> instance = TessInst(\"eng+spa\")\nAllocated Tesseract instance.\n\njulia> tess_init(instance, \"fra\")\ntrue","category":"page"},{"location":"load/","page":"Load languages","title":"Load languages","text":"All OCR call are executed with the TessInst object.  When the TessInst object is created you specify which languages you want to be able to OCR.  You can switch between languages on the fly by calling tess_init with a different set of languages.","category":"page"},{"location":"load/","page":"Load languages","title":"Load languages","text":"For all calls, if you don't specify a language English is assumed.  So for scanning English text you would just need to do:","category":"page"},{"location":"load/","page":"Load languages","title":"Load languages","text":"julia> using Tesseract\n\njulia> download_languages()\ntrue\n\njulia> instance = TessInst()\nAllocated Tesseract instance.\n\njulia> tess_init(instance)\ntrue","category":"page"},{"location":"ref/pix_write_jpeg/","page":"Tesseract.pix_write_jpeg","title":"Tesseract.pix_write_jpeg","text":"pix_write_jpeg","category":"page"},{"location":"ref/pix_write_jpeg/#Tesseract.pix_write_jpeg","page":"Tesseract.pix_write_jpeg","title":"Tesseract.pix_write_jpeg","text":"pix_write_jpeg(\n    filename::AbstractString,\n    pix::Pix;\n    quality::Integer = Int32(75),\n    progressive::Bool = false\n)::Bool\n\nWrite an image to a file in the JPEG image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the file to write to.\nR pix  The image to write to the file.\nO quality Int32(75) The quality to encode the image at.\nO progressive false Should the progressive encoding algorithm be used?\n\nRestriction:\n\nquality - Must be in the range 1 to 100.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\n\n\n\n\npix_write_jpeg(\n    stream::IO,\n    pix::Pix;\n    quality::Integer = Int32(75),\n    progressive::Bool = false\n)::Bool\n\nWrite an image to an IO stream in the JPEG image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR stream  The stream to write the image to.\nR pix  The image to write to the stream.\nO quality Int32(75) The quality to encode the image at.\nO progressive false Should the progressive encoding algorithm be used?\n\nRestriction:\n\nquality - Must be in the range 1 to 100.\n\n\n\n\n\npix_write_jpeg(\n    pix::Pix;\n    quality::Integer = Int32(75),\n    progressive::Bool = false\n)::Bool\n\nWrite an image to a byte array in the JPEG image format.  If there is an error nothing is returned.\n\nArguments:\n\nT Name Default Description\nR pix  The image to write to a byte array.\nO quality Int32(75) The quality to encode the image at.\nO progressive false Should the progressive encoding algorithm be used?\n\nRestriction:\n\nquality - Must be in the range 1 to 100.\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_delete/","page":"Tesseract.tess_delete","title":"Tesseract.tess_delete","text":"tess_delete!","category":"page"},{"location":"ref/tess_delete/#Tesseract.tess_delete!","page":"Tesseract.tess_delete","title":"Tesseract.tess_delete!","text":"tess_delete!(\n    inst::TessInst\n)::Nothing\n\nDestroy the Tesseract object and release any associated memory.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to free.\n\nDetails:\n\nThis method is called automatically by the garbage collector but can be called manually to release the object early.  This method can be called multiple times without any negative effects.\n\nOnce tess_delete!() is called on an object passing the object to any other library call will result in an error.\n\nNote: This method is not thread safe.\n\n\n\n\n\ntess_delete!(\n    pipe::TessPipeline,\n    wait::Bool = true\n)\n\nRelease all resources associated with the pipeline.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipeline to release.\nO wait true Wait for the tasks to complete?\n\nSee also: TessPipeline\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_pipeline_unlv/","page":"Tesseract.tess_pipeline_unlv","title":"Tesseract.tess_pipeline_unlv","text":"tess_pipeline_unlv","category":"page"},{"location":"ref/tess_pipeline_unlv/#Tesseract.tess_pipeline_unlv","page":"Tesseract.tess_pipeline_unlv","title":"Tesseract.tess_pipeline_unlv","text":"tess_pipeline_unlv(\n    pipe::TessPipeline,\n    filename::AbstractString,\n    utf8::Bool = true\n)::Bool\n\nGenerate a UNLV test file from the pipeline and save it to the specified file.  Returns false if there is a problem adding the UNLV generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the UNLV text from.\nR filename  The file to write the UNLV text to.\nO utf8 true Should the output be transcoded to UTF-8?\n\nDetails:\n\nIf the file exists it will be overwritten.  The Tesseract library outputs a file in Latin-1 encoding (even through all other formats are UTF-8).  We can use Julia to convert the file into UTF-8 to match the other encodings if desired.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\ntess_pipeline_unlv(pipeline, \"My Book.unlv\")\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\nfor line in readlines(\"My Book.unlv\")[1:10]\n    println(line)\nend\n\n# output\n\nNo one would have believed in the last years of the\nthe nineteenth century that this world was being watched\nwatched keenly and closely by intelligences greater than\nthan man's and yet as mortal as his own; that as men busied\nbusied themselves about their various concerns they were\nwere scrutinised and studied, perhaps almost as narrowly as\nas a man with a microscope might scrutinise the transient\ntransient creatures that swarm and multiply in a drop of\nof water. With infinite complacency men went to and fro over\nover this globe about their little affairs, serene in their\n\nSee also: tess_run_pipeline, tess_pipeline_word_box,           tess_pipeline_lstm_box, tess_pipeline_unlv_latin1\n\n\n\n\n\ntess_pipeline_unlv(\n    pipe::TessPipeline\n)::Union{TessOutput{String}, Nothing}\n\nGenerate an UNLV file from the pipeline and save it to a string.  Returns nothing if there is a problem adding the UNLV generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the UNLV text from.\n\nDetails:\n\nThe Tesseract generates Latin-1 text however this function will transcode it to UTF-8 to interact with Julia correctly.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\nbook = tess_pipeline_unlv(pipeline)\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\nfor line in split(book[], \"\\n\")[1:10]\n    println(line)\nend\n\n# output\n\nNo one would have believed in the last years of the\nthe nineteenth century that this world was being watched\nwatched keenly and closely by intelligences greater than\nthan man's and yet as mortal as his own; that as men busied\nbusied themselves about their various concerns they were\nwere scrutinised and studied, perhaps almost as narrowly as\nas a man with a microscope might scrutinise the transient\ntransient creatures that swarm and multiply in a drop of\nof water. With infinite complacency men went to and fro over\nover this globe about their little affairs, serene in their\n\nSee also: tess_run_pipeline, tess_pipeline_word_box,           tess_pipeline_lstm_box, tess_pipeline_unlv_latin1\n\n\n\n\n\ntess_pipeline_unlv(\n    func::Function,\n    pipe::TessPipeline\n)::Bool\n\nGenerate an UNLV file from the pipeline and pass it back to the client via a callback. Returns false if there is a problem adding the UNLV generator to the output.\n\nArguments:\n\nT Name Default Description\nR func  The function to call with the lines of text.\nR pipe  The pipline to collect the text from.\n\nDetails:\n\nThe text will be passed to the caller one line at a time. The \"\\n\" line terminator will be included with the text.  Tesseract generates UNLV text in Latin-1, this method will transcode it to UTF-8 to work with Julia.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\ncount = 0\ntess_pipeline_unlv(pipeline) do line\n    global count\n    if count < 10\n        print(line)\n    end\n    count += 1\nend\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\n# output\n\nNo one would have believed in the last years of the\nthe nineteenth century that this world was being watched\nwatched keenly and closely by intelligences greater than\nthan man's and yet as mortal as his own; that as men busied\nbusied themselves about their various concerns they were\nwere scrutinised and studied, perhaps almost as narrowly as\nas a man with a microscope might scrutinise the transient\ntransient creatures that swarm and multiply in a drop of\nof water. With infinite complacency men went to and fro over\nover this globe about their little affairs, serene in their\ntrue\n\nSee also: tess_run_pipeline, tess_pipeline_word_box,           tess_pipeline_lstm_box, tess_pipeline_unlv_latin1\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_available_languages/","page":"Tesseract.tess_available_languages","title":"Tesseract.tess_available_languages","text":"tess_available_languages","category":"page"},{"location":"ref/tess_available_languages/#Tesseract.tess_available_languages","page":"Tesseract.tess_available_languages","title":"Tesseract.tess_available_languages","text":"tess_available_languages(\n    inst::TessInst\n)::Union{Vector{String}, Nothing}\n\nGet the list of available languages that can be loaded.  Returns nothing if there was an error.\n\nArguments:\n\nT Name Default Description\nR inst  The instance to query for the available languages.\n\nDetails:\n\nGet the list of languages that can be used in the tessinit() function.  This method only returns something AFTER `tessinit()`` has been called.\n\nExample:\n\njulia> using Tesseract\n\njulia> download_languages(\"eng+fra+spa\")\ntrue\n\njulia> instance = TessInst(\"eng\")\nAllocated Tesseract instance.\n\njulia> tess_available_languages(instance)\n3-element Vector{String}:\n \"eng\"\n \"fra\"\n \"spa\"\n\nSee also: tess_init, update_languages, download_languages\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_parsed_tsv/","page":"Tesseract.tess_parsed_tsv","title":"Tesseract.tess_parsed_tsv","text":"tess_parsed_tsv","category":"page"},{"location":"ref/tess_parsed_tsv/#Tesseract.tess_parsed_tsv","page":"Tesseract.tess_parsed_tsv","title":"Tesseract.tess_parsed_tsv","text":"tess_parsed_tsv(\n    inst::TessInst,\n    page::Integer = Int32(1)\n)::Union{Vector{Tsv}, Nothing}\n\nRetrieve the TSV results from an recognition and parse it into a list of Tsv objects.  Returns nothing if there is an error.\n\nArguments:\n\nT Name Default Description\nR inst  The Tesseract instance to call.\nO page Int32(1) The page to get the data for.\n\nExample:\n\nusing Tesseract\n\ndownload_languages()\n\ninstance = TessInst()\npix = sample_pix()\n\ntess_image(instance, pix)\ntess_resolution(instance, 72)\n\ntsv = tess_parsed_tsv(instance);\n\n# output\n\n292-element Vector{Tsv}:\n Page:  [1] (500, 600)\n Block: [1/1] (10, 9) - (479, 514)\n Para:  [1/1/1] (11, 9) - (406, 14)\n Line:  [1/1/1/1] (11, 9) - (406, 14)\n Word:  [1/1/1/1/1] No (95.79193%)\n Word:  [1/1/1/1/2] one (95.79193%)\n Word:  [1/1/1/1/3] would (92.95379%)\n Word:  [1/1/1/1/4] have (92.95379%)\n Word:  [1/1/1/1/5] believed (96.81915%)\n Word:  [1/1/1/1/6] in (96.770004%)\n ⋮\n Word:  [1/1/7/3/5] twentieth (96.62509%)\n Word:  [1/1/7/3/6] century (96.81123%)\n Word:  [1/1/7/3/7] came (96.81123%)\n Word:  [1/1/7/3/8] the (96.72949%)\n Word:  [1/1/7/3/9] great (96.72949%)\n Para:  [1/1/8] (11, 509) - (172, 14)\n Line:  [1/1/8/1] (11, 509) - (172, 14)\n Word:  [1/1/8/1/1] great (86.34806%)\n Word:  [1/1/8/1/2] disillusionment. (86.34806%)\n\nSee also: tess_tsv, tess_confidences\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_pipeline_alto/","page":"Tesseract.tess_pipeline_alto","title":"Tesseract.tess_pipeline_alto","text":"tess_pipeline_alto","category":"page"},{"location":"ref/tess_pipeline_alto/#Tesseract.tess_pipeline_alto","page":"Tesseract.tess_pipeline_alto","title":"Tesseract.tess_pipeline_alto","text":"tess_pipeline_alto(\n    pipe::TessPipeline,\n    filename::AbstractString\n)::Bool\n\nGenerate an ALTO file from the pipeline and save it to the specified file.  Returns false if there is a problem adding the ALTO generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the ALTO text from.\nR filename  The file to write the ALTO text to.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\ntess_pipeline_alto(pipeline, \"My Book.xml\")\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\nfor line in readlines(\"My Book.xml\")[1:10]\n    println(line)\nend\n\n# output\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<alto xmlns=\"http://www.loc.gov/standards/alto/ns-v3#\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.loc.gov/standards/alto/ns-v3# http://www.loc.gov/alto/v3/alto-3-0.xsd\">\n    <Description>\n        <MeasurementUnit>pixel</MeasurementUnit>\n        <sourceImageInformation>\n            <fileName>My First Book</fileName>\n        </sourceImageInformation>\n        <OCRProcessing ID=\"OCR_0\">\n            <ocrProcessingStep>\n                <processingSoftware>\n\nSee also: tess_run_pipeline, tess_pipeline_hocr,           tess_pipeline_pdf, tess_pipeline_text           tess_pipeline_tsv\n\n\n\n\n\ntess_pipeline_alto(\n    pipe::TessPipeline\n)::Union{TessOutput{String}, Nothing}\n\nGenerate an ALTO file from the pipeline and save it to a string.  Returns nothing if there is a problem adding the ALTO generator to the output.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline to collect the ALTO text from.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\nbook = tess_pipeline_alto(pipeline)\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\nfor line in split(book[], \"\\n\")[1:10]\n    println(line)\nend\n\n# output\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<alto xmlns=\"http://www.loc.gov/standards/alto/ns-v3#\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.loc.gov/standards/alto/ns-v3# http://www.loc.gov/alto/v3/alto-3-0.xsd\">\n    <Description>\n        <MeasurementUnit>pixel</MeasurementUnit>\n        <sourceImageInformation>\n            <fileName>My First Book</fileName>\n        </sourceImageInformation>\n        <OCRProcessing ID=\"OCR_0\">\n            <ocrProcessingStep>\n                <processingSoftware>\n\nSee also: tess_run_pipeline, tess_pipeline_hocr,           tess_pipeline_pdf, tess_pipeline_text           tess_pipeline_tsv\n\n\n\n\n\ntess_pipeline_alto(\n    func::Function,\n    pipe::TessPipeline\n)::Bool\n\nGenerate an ALTO file from the pipeline and pass it back to the client via a callback. Returns false if there is a problem adding the ALTO generator to the output.\n\nArguments:\n\nT Name Default Description\nR func  The function to call with the lines of text.\nR pipe  The pipline to collect the text from.\n\nDetails:\n\nThe text will be passed to the caller one line at a time. The \"\\n\" line terminator will be included with the text.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\ncount = 0\ntess_pipeline_alto(pipeline) do line\n    global count\n    if count < 10\n        print(line)\n    end\n    count += 1\nend\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\n# output\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<alto xmlns=\"http://www.loc.gov/standards/alto/ns-v3#\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.loc.gov/standards/alto/ns-v3# http://www.loc.gov/alto/v3/alto-3-0.xsd\">\n    <Description>\n        <MeasurementUnit>pixel</MeasurementUnit>\n        <sourceImageInformation>\n            <fileName>My First Book</fileName>\n        </sourceImageInformation>\n        <OCRProcessing ID=\"OCR_0\">\n            <ocrProcessingStep>\n                <processingSoftware>\ntrue\n\nSee also: tess_run_pipeline, tess_pipeline_hocr,           tess_pipeline_pdf, tess_pipeline_text           tess_pipeline_tsv\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_unlv_latin1/","page":"Tesseract.tess_unlv_latin1","title":"Tesseract.tess_unlv_latin1","text":"tess_unlv_latin1","category":"page"},{"location":"ref/tess_unlv_latin1/#Tesseract.tess_unlv_latin1","page":"Tesseract.tess_unlv_latin1","title":"Tesseract.tess_unlv_latin1","text":"tess_unlv_latin1(\n    inst::TessInst\n)::Union{String, Nothing}\n\nExtract the text in UNLV format Latin-1 with reject and suspect codes.  If there is an error nothing is returned.\n\nArguments:\n\nT Name Default Description\nR inst  The Tesseract instance to call.\n\nDetails:\n\nThis method will call tess_recognize() if it has not been called yet for the image.\n\nThis method is more used to test the OCR results than anything else.  This method returns the OCR data in Latin1 encoding.  If you want to use it as a string in Julia use the tess_unlv method which will convert it to UTF-8 for you.\n\nExample:\n\nusing Tesseract\n\ndownload_languages()\n\ninstance = TessInst()\npix = sample_pix()\n\ntess_image(instance, pix)\ntess_resolution(instance, 72)\n\nunlv = tess_unlv_latin1(instance)\n\n# output\n\n1470-element Vector{UInt8}:\n 0x4e\n 0x6f\n 0x20\n 0x6f\n 0x6e\n 0x65\n 0x20\n 0x77\n 0x6f\n 0x75\n    ⋮\n 0x6f\n 0x6e\n 0x6d\n 0x65\n 0x6e\n 0x74\n 0x2e\n 0x0a\n 0x0a\n\nSee also: tess_lstm_box, tess_word_box, tess_text_box,           tess_unlv\n\n\n\n\n\n","category":"function"},{"location":"ref/iff/","page":"Tesseract.IFF","title":"Tesseract.IFF","text":"IFF","category":"page"},{"location":"ref/iff/#Tesseract.IFF","page":"Tesseract.IFF","title":"Tesseract.IFF","text":"@enum IFF begin\n    IFF_UNKNOWN        = 0\n    IFF_BMP            = 1\n    IFF_JFIF_JPEG      = 2\n    IFF_PNG            = 3\n    IFF_TIFF           = 4\n    IFF_TIFF_PACKBITS  = 5\n    IFF_TIFF_RLE       = 6\n    IFF_TIFF_G3        = 7\n    IFF_TIFF_G4        = 8\n    IFF_TIFF_LZW       = 9\n    IFF_TIFF_ZIP       = 10\n    IFF_PNM            = 11\n    IFF_PS             = 12\n    IFF_GIF            = 13\n    IFF_JP2            = 14\n    IFF_WEBP           = 15\n    IFF_LPDF           = 16\n    IFF_TIFF_JPEG      = 17\n    IFF_DEFAULT        = 18\n    IFF_SPIX           = 19\nend\n\nVarious constants used by leptonica to specify image types.\n\nDetails:\n\nValue Description\nIFF_UNKNOWN Unknown image type.\nIFF_BMP BMP image.\nIFFJFIFJPEG JPEG image.\nIFF_PNG PNG image.\nIFF_TIFF TIFF image with no compression.\nIFFTIFFPACKBITS TIFF image with pack bits compression.\nIFFTIFFRLE TIFF image with RLE compression.\nIFFTIFFG3 TIFF image with G3 compression.\nIFFTIFFG4 TIFF image with G4 compression.\nIFFTIFFLZW TIFF image with LZW compression.\nIFFTIFFZIP TIFF image with ZIP compression.\nIFF_PNM PNM image.\nIFF_PS PostScript file.\nIFF_GIF GIF image.\nIFF_JP2 JP2K image.\nIFF_WEBP WEBP image.\nIFF_LPDF PDF file.\nIFFTIFFJPEG TIFF image with JPEG compression.\nIFF_DEFAULT Default image type (used in saving).\nIFF_SPIX SPIX image.\n\n\n\n\n\n","category":"type"},{"location":"ref/pix_write_ps/","page":"Tesseract.pix_write_ps","title":"Tesseract.pix_write_ps","text":"pix_write_ps","category":"page"},{"location":"ref/pix_write_ps/#Tesseract.pix_write_ps","page":"Tesseract.pix_write_ps","title":"Tesseract.pix_write_ps","text":"pix_write_ps(\n    filename::AbstractString,\n    pix::Pix;\n    box::Union{PixBox, Nothing} = nothing,\n    ppi::Integer = Int32(300),\n    scale::AbstractFloat = Float32(1.0)\n)::Bool\n\nWrite an image to a PostScript file.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the file to write to.\nR pix  The image to write to the file.\nO box nothing Location to have the image appear on the page.\nO ppi Int32(300) The resolution to use for the image.\nO scale Float32(1.0) Scale the image on the page.\n\nRestrictions:\n\nppi - Must be greater than 0.\nscale - Must be greater than or equal to 0.0.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\nIf you don't want the image scaled set the scale to 1.0.  If you want to position the image on the page you can use a box however set w and h to 0, then the image will be positioned where you want it and not scaled.\n\nIf you want the image to be a specific size set the scale to 0.0 and use a box setting w and h to the width and height you want in thousandth of an inch.  So a width of 5000 and a height of 2000 will give you an image that is 5 inches across and 2 inches high.\n\nIf you want the image scaled set the scale to the factor you desire.  Value of 0.5 will cause the image to be halfed, while a value of 2.0 will double the size of the image.  If you want to also position the image on the page use a box but set the w and h values to 0.\n\n\n\n\n\npix_write_ps(\n    stream::IO,\n    pix::Pix;\n    box::Union{PixBox, Nothing} = nothing,\n    ppi::Integer = Int32(300),\n    scale::AbstractFloat = Float32(1.0)\n)::Bool\n\nWrite an image to a PostScript file.  Returns 'false' if there was an error.\n\nArguments:\n\nT Name Default Description\nR stream  The stream to write the image to.\nR pix  The image to write to the stream.\nO box nothing Location to have the image appear on the page.\nO ppi Int32(300) The resolution to use for the image.\nO scale Float32(1.0) Scale the image on the page.\n\nRestrictions:\n\nppi - Must be greater than 0.\nscale - Must be greater than or equal to 0.0.\n\nDetails:\n\nIf you don't want the image scaled set the scale to 1.0.  If you want to position the image on the page you can use a box however set w and h to 0, then the image will be positioned where you want it and not scaled.\n\nIf you want the image to be a specific size set the scale to 0.0 and use a box setting w and h to the width and height you want in thousandth of an inch.  So a width of 5000 and a height of 2000 will give you an image that is 5 inches across and 2 inches high.\n\nIf you want the image scaled set the scale to the factor you desire.  Value of 0.5 will cause the image to be halfed, while a value of 2.0 will double the size of the image.  If you want to also position the image on the page use a box but set the w and h values to 0.\n\n\n\n\n\npix_write_ps(\n    pix::Pix;\n    box::Union{PixBox, Nothing} = nothing,\n    ppi::Integer = Int32(300),\n    scale::AbstractFloat = Float32(1.0)\n)::Union{Vector{UInt8}, Nothing}\n\nWrite an image to a byte array.  Returns 'nothing' if there was an error.\n\nArguments:\n\nT Name Default Description\nR pix  The image to write to a byte array.\nO box nothing Location to have the image appear on the page.\nO ppi Int32(300) The resolution to use for the image.\nO scale Float32(1.0) Scale the image on the page.\n\nRestrictions:\n\nppi - Must be greater than 0.\nscale - Must be greater than or equal to 0.0.\n\nDetails:\n\nIf you don't want the image scaled set the scale to 1.0.  If you want to position the image on the page you can use a box however set w and h to 0, then the image will be positioned where you want it and not scaled.\n\nIf you want the image to be a specific size set the scale to 0.0 and use a box setting w and h to the width and height you want in thousandth of an inch.  So a width of 5000 and a height of 2000 will give you an image that is 5 inches across and 2 inches high.\n\nIf you want the image scaled set the scale to the factor you desire.  Value of 0.5 will cause the image to be halfed, while a value of 2.0 will double the size of the image.  If you want to also position the image on the page use a box but set the w and h values to 0.\n\n\n\n\n\n","category":"function"},{"location":"ref/tess_run_pipeline/","page":"Tesseract.tess_run_pipeline","title":"Tesseract.tess_run_pipeline","text":"tess_run_pipeline","category":"page"},{"location":"ref/tess_run_pipeline/#Tesseract.tess_run_pipeline","page":"Tesseract.tess_run_pipeline","title":"Tesseract.tess_run_pipeline","text":"tess_run_pipeline(\n    func::Function,\n    pipe::TessPipeline,\n    title::AbstractString = \"\"\n)::Bool\n\nRun the pipeline against a series of images.\n\nArguments:\n\nT Name Default Description\nR func  The callback to call for the images.\nR pipe  The pipline we're going to execute.\nO title \"\" Optional title for the document.\n\nDetails:\n\nThis is the primary function of the TessPipeline object.  This method is used to combine output from multiple images into a single document (or multiple documents of different types).\n\nThe argument passed back to the function is a method with the form:\n\nfunction add(Pix, Integer)::Bool\n\nThe client calls this method with the image and pixels per inch of the image.  The image will be processed immediately and added to the pipeline's output.\n\nIf you the callback returns false then the tess_run_pipeline() will return false.  If it doesn't return a boolean or returns true then tess_run_pipeline() returns true assuming there are no other errors.\n\nThis method can only be used \"once\".  After it's called new output needs to be added to the pipeline if you want to reuse the TessPipeline object.\n\nExamples:\n\nusing Tesseract\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\nbook = tess_pipeline_text(pipeline)\n\ntess_run_pipeline(pipeline, \"My First Book\") do add\n    add(pix_read(\"page01.tiff\"), 72)\n    add(pix_read(\"page02.tiff\"), 72)\n    add(pix_read(\"page03.tiff\"), 72)\nend\n\nfor line in split(book[], \"\\n\")[1:10]\n    println(line)\nend\n\n# output\n\nNo one would have believed in the last years of the\n\nthe nineteenth century that this world was being watched\nwatched keenly and closely by intelligences greater than\nthan man’s and yet as mortal as his own; that as men busied\nbusied themselves about their various concerns they were\nwere scrutinised and studied, perhaps almost as narrowly as\nas a man with a microscope might scrutinise the transient\ntransient creatures that swarm and multiply in a drop of\n\nSee also: TessPipeline, tess_pipeline_text\n\n\n\n\n\ntess_run_pipeline(\n    pipe::TessPipeline,\n    filename::AbstractString;\n    retryConfig::AbstractString = \"\",\n    timeout::Integer = Int32(0)\n)::Bool\n\nRun the pipline against a file that contains the list of images to process or a TIFF file with multiple images.  Returns false if the process fails.\n\nArguments:\n\nT Name Default Description\nR pipe  The pipline we're going to execute.\nR filename  The name of the file to read.\nK retryConfig \"\" A configuration file to load if an image cannot be processed.\nK timeout Int32(0) The maximum time in milliseconds to spend per page.\n\nDetails:\n\nThis method provides a simplified version of the tess_run_pipeline function.  This uses method exposed by the Tesseract library to process a list of files or a single TIFF file without additional input.\n\nThis method can only be used \"once\".  After it's called new output needs to be added to the pipeline if you want to reuse the TessPipeline object.\n\nExamples:\n\nProviding a file with a list of images to process:\n\nusing Tesseract\nusing Suppressor\n\n# Generate some pages to load.\nwrite(\"page01.tiff\", sample_tiff())\nwrite(\"page02.tiff\", sample_tiff())\nwrite(\"page03.tiff\", sample_tiff())\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\nbook = tess_pipeline_text(pipeline)\n\n# Create a text file with the files to process.\nopen(\"pages.lst\", create = true, write = true) do io\n    println(io, \"page01.tiff\")\n    println(io, \"page02.tiff\")\n    println(io, \"page03.tiff\")\nend\n\n@suppress tess_run_pipeline(pipeline, \"pages.lst\")\n\nfor line in split(book[], \"\\n\")[1:10]\n    println(line)\nend\n\n# output\n\nNo one would have believed in the last years of the\n\nthe nineteenth century that this world was being watched\nwatched keenly and closely by intelligences greater than\nthan man’s and yet as mortal as his own; that as men busied\nbusied themselves about their various concerns they were\nwere scrutinised and studied, perhaps almost as narrowly as\nas a man with a microscope might scrutinise the transient\ntransient creatures that swarm and multiply in a drop of\n\nUsing a multipage TIFF:\n\nusing Tesseract\nusing Suppressor\n\n# Generate some pages to load.\npix_write_tiff(\"book.tiff\", sample_pix())\npix_write_tiff(\"book.tiff\", sample_pix(); append = true)\npix_write_tiff(\"book.tiff\", sample_pix(); append = true)\n\ndownload_languages() # Make sure we have the data files.\n\ninstance = TessInst()\npipeline = TessPipeline(instance)\n\nbook = tess_pipeline_text(pipeline)\n\n@suppress tess_run_pipeline(pipeline, \"book.tiff\")\n\nfor line in split(book[], \"\\n\")[1:10]\n    println(line)\nend\n\n# output\n\nNo one would have believed in the last years of the\n\nthe nineteenth century that this world was being watched\nwatched keenly and closely by intelligences greater than\nthan man’s and yet as mortal as his own; that as men busied\nbusied themselves about their various concerns they were\nwere scrutinised and studied, perhaps almost as narrowly as\nas a man with a microscope might scrutinise the transient\ntransient creatures that swarm and multiply in a drop of\n\nSee also: TessPipeline, tess_pipeline_text\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_write_jp2k/","page":"Tesseract.pix_write_jp2k","title":"Tesseract.pix_write_jp2k","text":"pix_write_jp2k","category":"page"},{"location":"ref/pix_write_jp2k/#Tesseract.pix_write_jp2k","page":"Tesseract.pix_write_jp2k","title":"Tesseract.pix_write_jp2k","text":"pix_write_jp2k(\n    filename::AbstractString,\n    pix::Pix;\n    quality::Integer = Int32(34),\n    levels::Integer= Int32(5)\n)::Bool\n\nWrite an image to a file in the JP2K image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the file to write to.\nR pix  The image to write to the file.\nO quality Int32(34) The quality to encode the image at.\nO levels Int32(5) The number of reduced resolution images to encode in the file.\n\nRestriction:\n\nquality - Must be in the range 1 to 100.\nlevels - Can be a value from 1 to 10.\n\nDetails:\n\nIf the file exists it will be overwritten.\n\nSetting quality to 100 would generate a lossless image.\n\nIf levels is 1 then only a full resolution image is encoded in the file.  A value of 2 would cause a full resolution image and half resolution image to be encoded.  The default value of 5 will cause images with a reduction factor of 1, 2, 4, 8, and 16 to be encoded in the file.\n\nLeptonica restricts he number of levels to less than or equal to 10.  However imperical tests show that any value over 8 fails in the OpenJpeg library.\n\n\n\n\n\npix_write_jp2k(\n    stream::IO,\n    pix::Pix;\n    quality::Integer = Int32(34),\n    levels::Integer= Int32(5)\n)::Bool\n\nWrite an image to an IO stream in the JP2K image format.  If there is an error false is returned.\n\nArguments:\n\nT Name Default Description\nR stream  The stream to write the image to.\nR pix  The image to write to the stream.\nO quality Int32(34) The quality to encode the image at.\nO levels Int32(5) The number of reduced resolution images to encode in the file.\n\nRestriction:\n\nquality - Must be in the range 1 to 100.\nlevels - Can be a value from 1 to 10.\n\nDetails:\n\nSetting quality to 100 would generate a lossless image.\n\nIf levels is 1 then only a full resolution image is encoded in the file.  A value of 2 would cause a full resolution image and half resolution image to be encoded.  The default value of 5 will cause images with a reduction factor of 1, 2, 4, 8, and 16 to be encoded in the file.\n\nLeptonica restricts he number of levels to less than or equal to 10.  However imperical tests show that any value over 8 fails in the OpenJpeg library.\n\n\n\n\n\npix_write_jp2k(\n    pix::Pix;\n    quality::Integer = Int32(34),\n    levels::Integer= Int32(5)\n)::Union{Vector{UInt8}, Nothing}\n\nWrite an image to a byte array in the JP2K image format.  If there is an error nothing is returned.\n\nArguments:\n\nT Name Default Description\nR pix  The image to write to the byte array.\nO quality Int32(34) The quality to encode the image at.\nO levels Int32(5) The number of reduced resolution images to encode in the file.\n\nRestriction:\n\nquality - Must be in the range 1 to 100.\nlevels - Can be a value from 1 to 10.\n\nDetails:\n\nSetting quality to 100 would generate a lossless image.\n\nIf levels is 1 then only a full resolution image is encoded in the file.  A value of 2 would cause a full resolution image and half resolution image to be encoded.  The default value of 5 will cause images with a reduction factor of 1, 2, 4, 8, and 16 to be encoded in the file.\n\nLeptonica restricts he number of levels to less than or equal to 10.  However imperical tests show that any value over 8 fails in the OpenJpeg library.\n\n\n\n\n\n","category":"function"},{"location":"ref/pix_read_tiff/","page":"Tesseract.pix_read_tiff","title":"Tesseract.pix_read_tiff","text":"pix_read_tiff","category":"page"},{"location":"ref/pix_read_tiff/#Tesseract.pix_read_tiff","page":"Tesseract.pix_read_tiff","title":"Tesseract.pix_read_tiff","text":"pix_read_tiff(\n    filename::AbstractString;\n    page::Integer = Int32(1)\n)::Union{Pix, Nothing}\n\nRead a TIFF image from the specified file.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR filename  The name of the TIFF file to load.\nO page Int32(1) The image to load from the file.\n\nRestrictions:\n\npage - Must be greater than 0.\n\nDetails:\n\nTIFF files can contain multiple images.  The page parameter allows you to specify which image you want to load.\n\n\n\n\n\npix_read_tiff(\n    stream::IO;\n    page::Integer = Int32(1)\n)::Union{Pix, Nothing}\n\nRead a TIFF image from the specified stream.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR stream  The IO stream to read the TIFF file from.\nO page Int32(1) The image to load from the file.\n\nRestrictions:\n\npage - Must be greater than 0.\n\nDetails:\n\nThis implementation mirrors the API provided by Leptonica when you pass in a FILE pointer. This assumes that the remainder of the stream contains a TIFF image.\n\nTIFF files can contain multiple images.  The page parameter allows you to specify which image you want to load.\n\n\n\n\n\npix_read_tiff(\n    data::AbstractArray{UInt8};\n    page::Integer = Int32(1)\n)::Union{Pix, Nothing}\n\nRead a TIFF image from the byte array.  Returns nothing on error.\n\nArguments:\n\nT Name Default Description\nR data  The byte array to read the TIFF image from.\nO page Int32(1) The image to load from the file.\n\nRestrictions:\n\npage - Must be greater than 0.\n\nDetails:\n\nTIFF files can contain multiple images.  The page parameter allows you to specify which image you want to load.\n\n\n\n\n\n","category":"function"}]
}
